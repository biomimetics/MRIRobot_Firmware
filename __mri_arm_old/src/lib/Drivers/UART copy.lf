target C {
  single-threaded: true,
  platform: {
    name: "STM32",
    board: "F446RE"
  },
  files: ["/include_c/stm_comms.h", "/src_c/stm_comms.c"],
}

preamble{=
  #include "stm32f4xx_hal.h"
  #include "main.h"
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
  #include <ctype.h>

  #include "stm_comms.h"

  #define PRINT_UART 0
  #define USE_EX_DMA 0
=}

reactor UART_Handler(transmit_period: time = 10 ms, receive_period: time = 10 ms){
    input state_msg: StateMessage
    output cmd_msg: CommandMessage

    output not_receiving_error: bool

    state state_msg_: StateMessage
    state cmd_msg_: CommandMessage

    state not_receiving_count: int = 0
    state not_receiving_count_max: int = 1000

    //timer transmit_timer(0 ms, transmit_period)
    timer receive_timer(0 ms, receive_period)

    preamble{=
        // ------
        // Init functions
        // ------

        bool received_new_message = false;

        uint8_t uart_rx_dma_buffer[UART_BUFFER_SIZE];
        uint8_t uart_rx_dma_buffer_copy[UART_BUFFER_SIZE];
        size_t uart_receive_size;

        uint8_t uart_tx_data_buffer[UART_BUFFER_SIZE];

        uint8_t uart_tx_dma_buffer[UART_BUFFER_SIZE];

        void HAL_UART_RxCallback1(){};
        void HAL_UART_TxCallback1(){};


        //void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
        void HAL_UART_RxCallback_DMA(){
            //printf("In HAL_UART_RxCpltCallback, received %d bytes.", Size);
            uart_receive_size = (size_t)UART_BUFFER_SIZE; //(size_t)Size;

            //printf("Before memcpy: \n");
            //print_buffer(uart_rx_dma_buffer, UART_BUFFER_SIZE);
            memcpy(uart_rx_dma_buffer_copy, uart_rx_dma_buffer, UART_BUFFER_SIZE); // moves the data over to a buffer that's handled in the receive update

            received_new_message = true;
            HAL_UART_Receive_DMA(&DMA_UART, uart_rx_dma_buffer, UART_BUFFER_SIZE);
        }

        void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
            //handle_send_packet(uart_rx_dma_buffer, Size);
            //printf("In HAL_UARTEx_RxEventCallback, received %d bytes.", Size);
            //if (UART_BUFFER_SIZE == Size){
            //printf("In HAL_UARTEx_RxEventCallback, received %d bytes.", Size);

            /*
            if (((int)((sizeof(CommandMessage) + PACKET_BYTE_OVERHEAD) / 2)) < Size){ // if we've received the full buffer and not the half buffer
                uart_receive_size = (size_t)Size;
                memcpy(uart_rx_dma_buffer_copy, uart_rx_dma_buffer, Size); // moves the data over to a buffer that's handled in the receive update
                received_new_message = true;
            }
            */
            //printf("In HAL_UARTEx_RxEventCallback, received %d bytes.", Size);
            uart_receive_size = (size_t)Size;
            memcpy(uart_rx_dma_buffer_copy, uart_rx_dma_buffer, uart_receive_size); // moves the data over to a buffer that's handled in the receive update
            received_new_message = true;
            HAL_UARTEx_ReceiveToIdle_DMA(&DMA_UART, uart_rx_dma_buffer, UART_BUFFER_SIZE);
            //}
        }
        
    =}

    // method to initiate dma receiving callback loop
    method receiveToIdle_DMA_Init(){=
        if (USE_EX_DMA){
            HAL_UARTEx_ReceiveToIdle_DMA(&DMA_UART, uart_rx_dma_buffer, UART_BUFFER_SIZE);
        }
        else{
            HAL_UART_Receive_DMA(&DMA_UART, uart_rx_dma_buffer, UART_BUFFER_SIZE);
        }
    =}

    reaction (startup){=
        receiveToIdle_DMA_Init();
    =}

    //reaction (state_msg){=
    //    self->state_msg_ = state_msg->value;
    //=}

    reaction (state_msg){=
        self->state_msg_ = state_msg->value;

        // do write
        //print_state_message_int(&self->state_msg_);
        int data_buffer_len = encode_state_message_to_data_buffer(&self->state_msg_, uart_tx_data_buffer);
        int packet_len = build_packet(uart_tx_dma_buffer, PKT_TYPE_DATA, uart_tx_data_buffer, data_buffer_len);

        //print_buffer(uart_tx_dma_buffer, packet_len);
        //printf("UART: Packed a %d byte state_msg!\n", data_buffer_len);
        
        // int build_packet(uint8_t *out_buf, PacketType type, uint8_t *data, uint8_t data_len)

        if (packet_len < 1){
            if (PRINT_UART) printf("Failed to build packet!");
        }
        else{
            HAL_UART_Transmit_DMA(&DMA_UART, uart_tx_dma_buffer, packet_len);
        }

    =}

    reaction (receive_timer) -> cmd_msg, not_receiving_error{=
        // bool decode_data_buffer_to_command_message(CommandMessage *msg, uint8_t *data_buffer, size_t data_buffer_len)
        if (received_new_message){
            //printf("Got %d bytes in new message!\n", uart_receive_size);
            //CommandMessage new_cmd_msg;
            int res = handle_command_message_packet(&self->cmd_msg_, uart_rx_dma_buffer_copy, uart_receive_size);
            //print_command_message_int(&self->cmd_msg_);
            if (res){
                lf_set(cmd_msg, self->cmd_msg_);
            }
            received_new_message = false;
            self->not_receiving_count = 0;
        }
        else{
            self->not_receiving_count++;
        }

        if (self->not_receiving_count_max < self->not_receiving_count){
            if (PRINT_UART) printf("UART Handler not receiving new data!\n");
            self->not_receiving_count = 0;
            lf_set(not_receiving_error, true);
        }
        else{
            lf_set(not_receiving_error, false);
        }

    =}
}