target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>

  #define PRINT_PID 0
=}

reactor PIDController(LIM:float=0.1) {
  input current_pos: float
  input sea_pos: float
  input target_pos: float
  output out: float

  input sea_offset: float     // sea spring offset
  input sea_lim: float        // sea error limit


  input[4] constants: float  // Control Constants [Kp, Ki, Kd, Ks]

  state last_pos: float = 0  // to help with state variables
  state prev_time: time = 0

  reaction(target_pos, current_pos, constants) -> out {=
    instant_t now = lf_time_logical();
    interval_t interval = now - self->prev_time;

    float error_p = (target_pos->value) - (current_pos->value);
    float error_d = ((current_pos->value) - self->last_pos) / interval;

    float pid_out = constants[0]->value * error_p + constants[1]->value * error_d;

    if (PRINT_PID){
      printf("interval: %ld\r\n", interval);
      printf("error_p as int: %d\r\n", (int)(error_p*1000));
      printf("error_d as int: %d\r\n", (int)(error_d*1000));
    }

    if(pid_out > 30) {
      pid_out = 30;
    } else if(pid_out < -30) {
      pid_out = -30;
    } 

    if(pid_out < self->LIM && pid_out > -self->LIM) {
      pid_out = 0;
    }

    lf_set(out, pid_out);

    self->last_pos = current_pos->value;
    self->prev_time = now;
  =}
}
