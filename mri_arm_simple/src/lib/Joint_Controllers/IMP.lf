target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor IMPController(LIM:float=0.1) {
  input current_pos: float
  input sea_pos: float
  input target_pos: float
  output out: float

  input sea_offset: float     // sea spring offset
  input sea_lim: float        // sea error limit

  input[4] constants: float  // Control Constants [Kp, Kd, Lm, Ks]
  
  state fsm_state: int
  state last_sea: float = 0  // to help with state variables

  state last_pos: float = 0  // to help with state variables
  state prev_time: time = 0

  reaction(target_pos, current_pos, constants, sea_pos, sea_offset, sea_lim) -> out {=
    instant_t now = lf_time_logical();
    interval_t interval = now - self->prev_time;

    // Use sea offset and limit data
    float CHANGE_P = sea_lim->value * 0.8;
    float CHANGE_D = sea_lim->value * 10;
    float LIM = sea_lim->value * 0.3; 
    float sea_value = sea_pos->value - sea_offset->value*10;

    float error_p = (target_pos->value) - (current_pos->value);
    float error_d = ((current_pos->value) - self->last_pos) / interval;

    float target_sea_value = 0.01 * constants[0]->value * error_p + constants[1]->value * error_d;
    float pid_out;

    float sea_diff = (sea_value - self->last_sea);
    self->last_sea = sea_value;

    bool flag_p = (sea_value > CHANGE_P || sea_value < -CHANGE_P);
    bool flag_d = (sea_diff > CHANGE_D || sea_diff < -CHANGE_D);
    // FSM for control state.
    // 0: We are in the idle state
    // 1: We are moving
    switch(self->fsm_state){
      case 0: // For idle state
        pid_out = 0;
        self->fsm_state = flag_p || flag_d;
        break;
      case 1: // For movement state
        pid_out = 0.1 * constants[3]->value * (sea_value - target_sea_value);
        self->fsm_state = (sea_value > LIM || sea_value < -LIM);
        break;
    }

    if(pid_out > 30) {
      pid_out = 30;
    } else if(pid_out < -30) {
      pid_out = -30;
    } 

    if(pid_out < self->LIM && pid_out > -self->LIM) {
      pid_out = 0;
    }

    lf_set(out, pid_out);

    self->last_pos = current_pos->value;
    self->prev_time = now;
  =}
}
