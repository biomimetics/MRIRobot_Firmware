target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor QDEC(sample_period: time = 5 ms) {
  input reset_qdec: bool

  output[7] qdec_out: float
  output[7] sea_out: float

  timer trigger(0, sample_period)

  preamble {=
    UART_HandleTypeDef huart3;
    static int printVals = true;
    static int printcnt = 0;
    static int printcnt_lim = 100;

    uint8_t qdec_reset[1]= {0x01};
    uint8_t qdec_disable[1]= {0x02};
    uint8_t qdec_enable[1]= {0x03};

    uint8_t req_qdec[2]=  {0x04, 0x05};


    float cpr_qdec[7]=   {52000, 52000, 52000, 52000, 52000, 52000, 52000};
    float cpr_sea[7]=     {40000, 40000, 40000, 40000, 40000, 40000, 40000};
    float pi = 3.14159;

    uint8_t data[100];
    long count[7];

    static void MX_UART3_Init(void) {
      huart3.Instance = USART3;
      huart3.Init.BaudRate = 921600;
      huart3.Init.WordLength = UART_WORDLENGTH_8B;
      huart3.Init.StopBits = UART_STOPBITS_1;
      huart3.Init.Parity = UART_PARITY_NONE;
      huart3.Init.Mode = UART_MODE_TX_RX;
      huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart3.Init.OverSampling = UART_OVERSAMPLING_16;
      if (HAL_UART_Init(&huart3) != HAL_OK)
      {
        Error_Handler();
      }
    }


    static void get_ticks(char msg) {
      HAL_UART_Transmit(&huart3, &(msg), 1, HAL_MAX_DELAY);
      HAL_UART_Receive(&huart3, data, 49, HAL_MAX_DELAY);

      for(int i=0; i<7; i++) {
        count[i] = data[0 + (i*7)] + (data[1 + (i*7)]<<8) + (data[2 + (i*7)]<<16) + (data[3 + (i*7)]<<24) + (data[4 + (i*7)]<<32) + (data[5 + (i*7)]<<40) + (data[6 + (i*7)]<<48);
        if (printVals && printcnt>=printcnt_lim) {
          printf("%ld  ", count[i]);
        }
      }
    }
    const int LEN = 20;
    static int hist[20] ={0, 0, 0, 0, 0, 0, 0};
    static int med_ind = 0;

    static int get_avg_r(uint16_t value) {
      hist[med_ind] = (int)value;
      med_ind = (med_ind >= LEN)? 0 : med_ind+1;

      int sum = 0;
      for (int i=0; i<LEN; i++) {
        sum += hist[i];
      }
      return sum/LEN;
    }
  =}

  reaction(startup) {=
    MX_UART3_Init();

    HAL_UART_Transmit(&huart3, qdec_reset, 1, HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart3, qdec_enable, 1, HAL_MAX_DELAY);
  =}

  reaction(reset_qdec) {=
    HAL_UART_Transmit(&huart3, qdec_reset, 1, HAL_MAX_DELAY);
  =}

  // Update Encoder values
  // This function should take approximately 1ms to operate
  reaction(trigger) -> qdec_out, sea_out {=
    long start = HAL_GetTick();

    // Get values for SEA encoders
    get_ticks(req_qdec[0]);
    for (int i=0; i<7; i++) {
      lf_set(sea_out[i],  2*pi* ((float) (count[i]) / cpr_sea[i]));
    }

    // Get values for USM encoders
    get_ticks(req_qdec[1]);
    for (int i=0; i<7; i++) {
      lf_set(qdec_out[i],  2*pi* ((float) (count[i]) / cpr_qdec[i]));
    }

    long end = HAL_GetTick();
    if (printVals && printcnt>=printcnt_lim) {
      printf("[%ld]", end-start);
      printf("| \r\n");
    }

    if (printcnt > printcnt_lim) {
      printcnt = 0;
    } else {
      printcnt ++;
    }
  =}
}
