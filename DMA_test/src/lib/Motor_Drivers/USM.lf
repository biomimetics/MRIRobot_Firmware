target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor USM {
  input[7] speed: float

  // Main system clock we will use inside main
  timer motor_tick0(0 ms, 12 ms) 
  timer motor_tick1(4 ms, 12 ms) 
  timer motor_tick2(8 ms, 12 ms) 

  preamble {=
    TIM_HandleTypeDef htim1;
    TIM_HandleTypeDef htim2;
    TIM_HandleTypeDef htim3;
    TIM_HandleTypeDef htim4;

    int MAX_SPEED[7]        =    {500, 500, 500, 500, 500, 500, 500};
    float SPEED_SCALE[7]    =    {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    float _speed[7]         =    {0, 0, 0, 0, 0, 0, 0};

    float motor_dir[7]=   {1, 1, 1, -1, -1, -1, -1};

    float USM_LIMIT = 0.06;
    volatile int en_usm;

    int state = 0;

    static void MX_TIM3_Init(void) {
      TIM_ClockConfigTypeDef sClockSourceConfig = {0};
      TIM_MasterConfigTypeDef sMasterConfig = {0};
      TIM_OC_InitTypeDef sConfigOC = {0};

      htim3.Instance = TIM3;
      htim3.Init.Prescaler = 0;
      htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
      htim3.Init.Period = 1000;
      htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
      htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
      ;HAL_TIM_Base_Init(&htim3);

      sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
      HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);

      HAL_TIM_PWM_Init(&htim3);

      sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
      sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
      HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
      sConfigOC.Pulse = 0;
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

      HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
      HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
      HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
      HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
      HAL_TIM_MspPostInit(&htim3);
    }

    static void MX_TIM4_Init(void)
    {
      TIM_ClockConfigTypeDef sClockSourceConfig = {0};
      TIM_MasterConfigTypeDef sMasterConfig = {0};
      TIM_OC_InitTypeDef sConfigOC = {0};

      htim4.Instance = TIM4;
      htim4.Init.Prescaler = 0;
      htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
      htim4.Init.Period = 1000;
      htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
      htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
      HAL_TIM_Base_Init(&htim4);
      
      sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
      HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
      HAL_TIM_PWM_Init(&htim4);
      sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
      sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
      HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
      sConfigOC.Pulse = 0;
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
      HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
      HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
      HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
      HAL_TIM_MspPostInit(&htim4);

    }

    static void USM_GPIO_Init(void) {
      GPIO_InitTypeDef GPIO_InitStruct = {0};
      __HAL_RCC_GPIOB_CLK_ENABLE();
      __HAL_RCC_GPIOC_CLK_ENABLE();

      //+----------------------------------------------------------------+
      //  Name,     PWM     Direction,    Enable
      //  USM_0,    PB4,    PC13,         PB1
      //  USM_1,    PB5,    PC14,         PB2
      //  USM_2,    PC8,    PC15,         PB3
      //  USM_3,    PC9,    PC4,          PB9
      //  USM_4,    PB6,    PC5,          PB10
      //  USM_5,    PB7,    PB15,         PB12
      //  USM_6,    PB8,    PB14,         PB13
      //+----------------------------------------------------------------+

      // Write reset value pins


      // Configure output pins (DIR/EN)
      HAL_GPIO_WritePin(GPIOA,  GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
      
      HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|
        GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
      GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|
                            GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
      
      HAL_GPIO_WritePin(GPIOC,  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      // Configure input pins (ON/OFF Switch) PC0
      GPIO_InitStruct.Pin = GPIO_PIN_3;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

      // Configure output pin (Status LED)
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      GPIO_InitStruct.Pin = GPIO_PIN_0;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    }

    static int min(int a, int b) {
      return a<b? a: b;
    }

    static int max(int a, int b) {
      return a>b? a: b;
    }

    static int conv_speed(float speed, int idx) {
      float USM_MIN_SPEED = 3;
      if (speed < 0)
        return  min((int)((1000 * max(USM_MIN_SPEED, -speed) * SPEED_SCALE[idx])/100), MAX_SPEED[idx]);
      else
        return  min((int)((1000 * max(USM_MIN_SPEED, speed) * SPEED_SCALE[idx])/100), MAX_SPEED[idx]);
    }

  =}


  reaction(startup) {=
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();


    MX_TIM3_Init();
    MX_TIM4_Init();
    USM_GPIO_Init();

    // Initially set all enable values to 0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);    // for USM0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);    // for USM1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);    // for USM2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);    // for USM3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);   // for USM4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);   // for USM5
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);   // for USM5

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   // USM_0, PB4
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // USM_1, PB5
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);   // USM_2, PC8
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);   // USM_3, PC9
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   // USM_4, PB6
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);   // USM_5, PB7
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);   // USM_5, PB8
  =}

  reaction(speed) {=
    en_usm = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, en_usm);

    for (int i=0; i<7; i++) {
      _speed[i] = en_usm? speed[i]->value * motor_dir[i] : 0;
    }
  =}

  reaction(motor_tick0) {=
    // Set USM direction values
    // For some reason, setting the motor direction doesnt work unless we add a small delay in between
    // Update: It seems like moving the direction set above the enable pins resolves this issue
    //      Though I am still not sure why this is happening
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,   _speed[0] >= 0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,    _speed[1] >= 0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,    _speed[2] >= 0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,    _speed[3] >= 0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,    _speed[4] >= 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,   _speed[5] >= 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,   _speed[6] >= 0);


  =}

  reaction(motor_tick1) {=
    // Sometimes it doesnt properly register if we dont add a delay here. 
    //    I think its an issue with the motor controller getting too many commands at the same time
    // HAL_Delay(1);
    TIM3->CCR1 = conv_speed(_speed[0], 0);  // Set period for USM0
    TIM3->CCR2 = conv_speed(_speed[1], 1);  // Set period for USM1
    TIM3->CCR3 = conv_speed(_speed[2], 2);  // Set period for USM2
    TIM3->CCR4 = conv_speed(_speed[3], 3);  // Set period for USM3
    TIM4->CCR1 = conv_speed(_speed[4], 4);  // Set period for USM4
    TIM4->CCR2 = conv_speed(_speed[5], 5);  // Set period for USM5
    TIM4->CCR3 = conv_speed(_speed[6], 6);  // Set period for USM6

  =}

  reaction(motor_tick2) {=
    // Set USM enable values
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,    _speed[0] > USM_LIMIT || _speed[0] < -USM_LIMIT);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,    _speed[1] > USM_LIMIT || _speed[1] < -USM_LIMIT);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,    _speed[2] > USM_LIMIT || _speed[2] < -USM_LIMIT);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,    _speed[3] > USM_LIMIT || _speed[3] < -USM_LIMIT);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,   _speed[4] > USM_LIMIT || _speed[4] < -USM_LIMIT);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,   _speed[5] > USM_LIMIT || _speed[5] < -USM_LIMIT);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,   _speed[6] > USM_LIMIT || _speed[6] < -USM_LIMIT);

  =}
}
