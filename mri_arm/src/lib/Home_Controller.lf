target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
  #include <stdio.h>

  #ifndef __HOME_MODE_ENUM
  #define __HOME_MODE_ENUM

  // Set Motor Mode -> velocity or position control
  typedef enum {
      WRIST0 = 0U, 
      WRIST1 = 1U, 
      WRIST2 = 2U, 
      WRIST3 = 3U,

      ELBOW0 = 10U, 
      ELBOW1 = 11U, 
      ELBOW2 = 12U, 
      ELBOW3 = 13U, 
      ELBOW4 = 14U, 

      SHOULDER0 = 20U, 
      SHOULDER1 = 21U, 
      SHOULDER2 = 22U, 

      DONE = 30U
    } HOME_STATE;

  #endif /* __HOME_MODE_ENUM */
=}

reactor HomeController(sample_period: time = 15 ms) {
  timer trigger(0, sample_period)

  input[7] current_pos: float
  input[7] sea_pos: float

  output[7] motor_speed: float
  output is_home: int

  // state is_home: int = 0
  state home_speed: float[7] = {-20, -10, 100, 0, 30, 30, 30}

  state last_pos: float[7] = {0, 0, 0, 0, 0, 0, 0}
  state last_sea: float[7] = {0, 0, 0, 0, 0, 0, 0}
  state pos_diff: float[7] = {0, 0, 0, 0, 0, 0, 0}

  state diffzero_cnt: int[7] = {0, 0, 0, 0, 0, 0, 0}

  state update_cnt: int = 0

  timer switch_update(0 ms, 40 ms)

  preamble {=
    static int printVals = false;
    static int printcnt = 0;
    static int printcnt_lim = 20;

    volatile int switch_val[7] = {0, 0, 0, 0, 0, 0, 0};
    static float SEA_limits[7] = {0, 0, 0, 1.8, 1.8, 0.6, 0.6};
    static int SEA_trig[7] = {0, 0, 0, 0, 0, 0, 0};
    static float ref[7] = {0, 0, 0, 0, 0, 0, 0};
    static float rpos[7] = {0, 0, 0, 0, 0, 0, 0};

    static HOME_STATE home_state = WRIST0;
    static int _is_home = 0;

    static void MX_GPIO_Init(void) {
      GPIO_InitTypeDef GPIO_InitStruct = {0};
      __HAL_RCC_GPIOB_CLK_ENABLE();
      __HAL_RCC_GPIOH_CLK_ENABLE();

      //+----------------------------------------------------------------+
      //  Name,     
      //  home0,    PA4
      //  home1,    PA5
      //  home2,    PA6
      //  home3,    PA7
      //  home4,    PA8
      //  home5,    PA11
      //  home6,    PA12
      //+----------------------------------------------------------------+

      /* Configure Switch pins : PC1, PC2, PC3 */
      GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    }

    static float get_speed(float curr, float target) {
      float speed = 110 * (curr - target);
      speed = speed > 20? 20:speed;
      speed = speed < -20? -20:speed;
      return speed;
    }

    static float absf(float a) {
      return a<0? -a:a;
    }
  
  =}

  reaction(startup) {=
    for (int i=0; i<7; i++) {
      self->home_speed[i] = 0;
    }
  =}

  reaction(switch_update) {=
    switch_val[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
    switch_val[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
    switch_val[4] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
    switch_val[5] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
    switch_val[6] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);

    if (printVals && printcnt>=printcnt_lim) {
      printf("switch vals: %d, %d, %d, %d, %d, %d, %d\r\n", switch_val[0], switch_val[1], switch_val[2], switch_val[3], switch_val[4], switch_val[5], switch_val[6]);
    }
    printcnt = (printcnt >= printcnt_lim) ? 0 : printcnt+1;

  =}

  reaction(current_pos, sea_pos) -> motor_speed, is_home {=
    bool home_stage[3] = {1, 1, 0};
      //+----------------------------------------------------------------+
      //  Homing states:
      //
      //  Home Stage (WRIST) - Home second joint
      //    - State(WRIST0) - Init state (Check if we want to home this stage)
      //    - State(WRIST1) - Home in same direction
      //    - State(WRIST2) - Home in opposite direction
      //    - State(WRIST3) - Return to center
      //
      //  Home Stage (ELBOW) - Home first joint
      //    - State(ELBOW0) - Init state (Check if we want to home this stage)
      //    - State(ELBOW1) - Home in same direction
      //    - State(ELBOW2) - Home in opposite direction
      //
      //  Home Stage (SHOLDER) - Home base
      //    - State(SHOULDER0) - Init state (Check if we want to home this stage)
      //    - State(SHOULDER2) - Home in same direction
      //    - State(SHOULDER3) - Home in opposite direction
      //
      //
      //  - State(DONE) - Final return state
      //+----------------------------------------------------------------+


    // Calculate any relevant global information
    //    Helps simplify the code
    for (int i=0; i<7; i++) {
      SEA_trig[i] = (sea_pos[i]->value > SEA_limits[i])? 1:
                    (sea_pos[i]->value < -SEA_limits[i])? -1: 0;
      rpos[i] = current_pos[i]->value - ref[i];
    }


    if (_is_home == 0) {
      switch (home_state) {
        // + ---------------------------------------------------- +
        // | Home joint module WRIST
        // + ---------------------------------------------------- +
        case WRIST0:           // Check if we want to home this module
          printf("[HOME] Home module WRIST\r\n");
          home_state = home_stage[0]? WRIST1:ELBOW0;
          break;
        case WRIST1:           //
          self->home_speed[5] = 10;
          self->home_speed[6] = -10;
          if (SEA_trig[5] == -1 && SEA_trig[6] == 1 ) {
            printf("    [WRIST] Home step 1 done\r\n");
            self->home_speed[5] = 0;
            self->home_speed[6] = 0;
            ref[5] = current_pos[5]->value - (1/10) * sea_pos[5]->value;
            ref[6] = current_pos[6]->value - (1/10) * sea_pos[6]->value;
            home_state = WRIST2;
          }
          break;
        case WRIST2:           //   Then, home with the rotary direction
          self->home_speed[5] = -10 + -get_speed((rpos[6] - rpos[5]), 0);
          self->home_speed[6] = -10 +  get_speed((rpos[6] - rpos[5]), 0);
          if (SEA_trig[5] == 1 && SEA_trig[6] == 1) {
            printf("    [WRIST] Home step 2 done\r\n");
            home_state = WRIST3;
            ref[5] = current_pos[5]->value - (1/10) * sea_pos[5]->value - 3.22;
            ref[6] = current_pos[6]->value - (1/10) * sea_pos[6]->value - 3.22;
          }
          break;
        case WRIST3:           //   Then, home with the rotary direction
          self->home_speed[5] = get_speed(rpos[5], 0) + -get_speed((rpos[6] - rpos[5]), 0);
          self->home_speed[6] = get_speed(rpos[6], 0) +  get_speed((rpos[6] - rpos[5]), 0);
          if (absf(rpos[5]) < 0.01 && absf(rpos[6]) < 0.01) {
            printf("    [WRIST] Home step 3 done\r\n");
            home_state = ELBOW0;
            self->home_speed[5] = 0;
            self->home_speed[6] = 0;
          }
          break;
      



        // + ---------------------------------------------------- +
        // | Home joint module ELBOW
        // + ---------------------------------------------------- +
        case ELBOW0:           // Check if we want to home this module
          printf("[HOME] Home module ELBOW\r\n");
          home_state = home_stage[1]? ELBOW1:SHOULDER0;
          break;
        case ELBOW1:           //   First home the movement direction
          self->home_speed[3] = -8;
          self->home_speed[4] = 8;
          if (SEA_trig[3] == 1 && SEA_trig[4] == -1 ) {
            printf("    [ELBOW] Home step 1 done\r\n");
            self->home_speed[3] = 0;
            self->home_speed[4] = 0;
            ref[3] = current_pos[3]->value + (1/10) * sea_pos[3]->value;
            ref[4] = current_pos[4]->value + (1/10) * sea_pos[4]->value;
            home_state = ELBOW2;
          }
          break;
        case ELBOW2:           //   Have the motors point up
          self->home_speed[3] = -25 +  1.1*get_speed((rpos[4] - rpos[3]), 0);
          self->home_speed[4] = -25 + -1.1*get_speed((rpos[4] - rpos[3]), 0);
          if (SEA_trig[3] == 1 && SEA_trig[4] == 1) {
            printf("    [ELBOW] Home step 2 done\r\n");
            home_state = ELBOW3;
            ref[3] = current_pos[3]->value + (1/10) * sea_pos[3]->value + 3.22;
            ref[4] = current_pos[4]->value + (1/10) * sea_pos[4]->value + 3.22;
          }
          break;
        case ELBOW3:           //   Then, home with the rotary direction
          self->home_speed[3] = -get_speed(rpos[3], 0) + 1.2*get_speed((rpos[4] - rpos[3]), 0);
          self->home_speed[4] = -get_speed(rpos[4], 0) +  -1.2*get_speed((rpos[4] - rpos[3]), 0);
          if (absf(rpos[3]) < 0.01 && absf(rpos[4]) < 0.01) {
            printf("    [ELBOW] Home step 3 done\r\n");
            home_state = ELBOW4;
            self->home_speed[3] = 0;
            self->home_speed[4] = 0;
          }
          break;

        case ELBOW4:           //   Then, home with the rotary direction
        home_state = SHOULDER0;
          break;
        



        // + ---------------------------------------------------- +
        // | Home joint module SHOULDER
        // + ---------------------------------------------------- +
        case SHOULDER0:           // Check if we want to home this module
          printf("[HOME] Home module SHOULDER\r\n");
          home_state = home_stage[2]? SHOULDER1:DONE;
          break;
        case SHOULDER1:           //
          home_state = SHOULDER2;
          break;
        case SHOULDER2:           //
          home_state = DONE;
          break;
        



        // + ---------------------------------------------------- +
        // | Homing complete
        // + ---------------------------------------------------- +
        case DONE:           // Homing complete
          printf("[HOME] Homing complete\r\n");
          _is_home = 1;
          break;
        default:
          _is_home = 1;
      }

    } else {
      home_state = DONE;
      for(int i=0; i<7; i++) {
        self->home_speed[i] = 0;
      }
    }
    // Set the output
    for(int i=0; i<7; i++) {
      lf_set(motor_speed[i], self->home_speed[i]);
    }
    lf_set(is_home, _is_home);
  =}
}
