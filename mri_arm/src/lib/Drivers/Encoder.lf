target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
  #include <../../../motor_config.h>

  #define PRINT_ENCODER 0

  #define TWO_PI 6.28318
  #define NSEC_TO_SEC 0.000000001
  #define MSEC_TO_SEC 0.001
=}

reactor QDEC(sample_period: time = 5 ms) {
  mutable input reset_qdec: bool
  mutable input enable_qdec: bool

  output[7] qdec_out: float
  output[7] sea_out: float

  output[7] qdec_vel_out: float

  timer trigger(0, sample_period)
  timer enable(0, 20 ms)

  state _reset_qdec: bool = false
  state _enable_qdec: bool = false

  // internal copies of joint and sea encoder values to use
  state _qdec_pos: float[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
  state _qdec_pos_last: float[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
  state _qdec_vel_est: float[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}

  state _qdec_convert_motor_to_joint_rad: float[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0} // conversion from motor space to joint space

  state _sea_pos: float[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
  state _sea_pos_last: float[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0} // unused!
  state _sea_vel_est: float[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0} // unused!

  state prev_time: time = 0

  
  preamble {=
    extern UART_HandleTypeDef huart3;

    extern DMA_HandleTypeDef hdma_usart3_rx;
    extern DMA_HandleTypeDef hdma_usart3_tx;

    //static int PRINT_ENCODER = true; // move all of these to define statements in a central location. annoying to track them down.
    static int printcnt = 0;
    static int printcnt_lim = 100; // print every nth time


    // QDEC Commands
    uint8_t qdec_reset[1]= {0x01};            // Reset QDEC values
    uint8_t qdec_disable[1]= {0x02};          // Disable encoders
    uint8_t qdec_enable[1]= {0x03};           // Enable encoders
    uint8_t req_qdec[2]=  {0x04, 0x05};       // Request data

    float pi = 3.14159;
    static uint8_t data[200];
    static long count[14];

    static void MX_DMA_Init(void) {
      /* DMA controller clock enable */
      __HAL_RCC_DMA1_CLK_ENABLE();

      /* DMA interrupt init */
      /* DMA1_Stream1_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
      HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
      
      /* DMA1_Stream3_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
      HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
    }

    static void MX_UART3_Init(void) {
      huart3.Instance = USART3;
      huart3.Init.BaudRate = 921600;
      huart3.Init.WordLength = UART_WORDLENGTH_8B;
      huart3.Init.StopBits = UART_STOPBITS_1;
      huart3.Init.Parity = UART_PARITY_NONE;
      huart3.Init.Mode = UART_MODE_TX_RX;
      huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart3.Init.OverSampling = UART_OVERSAMPLING_16;
      HAL_UART_Init(&huart3);
    }

    static void MX_GPIO_Init(void) {
      GPIO_InitTypeDef GPIO_InitStruct = {0};
      __HAL_RCC_GPIOB_CLK_ENABLE();

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
      GPIO_InitStruct.Pin = GPIO_PIN_15;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

      /* Configure Switch pins : PC1, PC2, PC3 */
      GPIO_InitStruct.Pin = GPIO_PIN_2;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    }

    // Recieve callback function
    void HAL_UART_RxCallback3() {
      HAL_UART_Receive_DMA(&huart3, data, 98);
    }

    static int last_switch = 0;
    long reference_tick = 0;
    long current_tick = 0;
  =}

  reaction(startup) {=
    MX_DMA_Init();
    MX_UART3_Init();
    MX_GPIO_Init();

    if (PRINT_ENCODER){printf("Encoder.lf: startup: Reseting and enableing qdec...\r\n");}
    HAL_UART_Transmit(&huart3, qdec_reset, 1, HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart3, qdec_enable, 1, HAL_MAX_DELAY);

    HAL_UART_Receive_DMA(&huart3, data, 98);
    HAL_UART_Transmit(&huart3, req_qdec, 2, HAL_MAX_DELAY);

    // computing conversions from motor/encoder space to joint space
    for (int i = 0; i<7; i++){
      self->_qdec_convert_motor_to_joint_rad[i] = (TWO_PI) / (motor_configs[i]->qdec_cpr * motor_configs[i]->gear_ratio);
    }

    self->prev_time = lf_time_physical_elapsed(); //lf_time_physical();
    reference_tick = HAL_GetTick(); // gives miliseconds since last reboot
  =}

  reaction(reset_qdec) {=
    self->_reset_qdec = reset_qdec->value;
    if (self->_reset_qdec){
      HAL_UART_Transmit(&huart3, qdec_reset, 1, HAL_MAX_DELAY);
      HAL_UART_Receive_DMA(&huart3, data, 98);
    }
    self->_reset_qdec = false; 
    reset_qdec->value = self->_reset_qdec;// should work if reset_qdec is mutable?
  =}

  reaction(enable_qdec) {=
    self->_enable_qdec = enable_qdec->value; // sets other reactions/methods know if encoders are active or not

    if (self->_enable_qdec){
      HAL_UART_Transmit(&huart3, qdec_enable, 1, HAL_MAX_DELAY);
      if (PRINT_ENCODER) {printf("Enabling Encoders\r\n");}
    } else {
      HAL_UART_Transmit(&huart3, qdec_disable, 1, HAL_MAX_DELAY);
      if (PRINT_ENCODER) {printf("Disabling Encoders\r\n");}
    }

  =}

  // Update Encoder values
  // This function should take approximately 1ms to operate
  reaction(trigger) -> qdec_out, qdec_vel_out, sea_out {=

    // from pid controller
    // instant_t now = lf_time_logical();
    // interval_t interval = now - self->prev_time;

    //self->last_pos = current_pos->value;
    
    //printf("LF: now: %ld, self->prev_time: %ld, diff: %ld\r\n", now, self->prev_time, interval);

    // compute the interval in seconds between loop triggers
    long now_tick = HAL_GetTick(); // gives miliseconds since last stm32 reset
    long diff_tick = now_tick - reference_tick;
    float interval_sec = ((float)(diff_tick)) * MSEC_TO_SEC; // should be loop time in seconds
    reference_tick = now_tick;

    long start = HAL_GetTick();


    // Prep the next request
    HAL_UART_Transmit(&huart3, req_qdec, 2, HAL_MAX_DELAY);

    // Shift over relevant data
    for(int i=0; i<14; i++) {
      count[i] = data[0+(i*7)] + (data[1+(i*7)]<<8) + (data[2+(i*7)]<<16) + (data[3+(i*7)]<<24) 
                               + (data[4+(i*7)]<<32) + (data[5+(i*7)]<<40) + (data[6+(i*7)]<<48);
    }

    if (PRINT_ENCODER && printcnt>=printcnt_lim) {
      printf("sea: ");
    }
    // Get values for SEA encoders
    for (int i=0; i<4; i++) {
      // 0.5644 = 25.4/45
      float sea_raw = ((float) (count[6-i])) * 0.5644 * (1 / motor_configs[i]->sea_cpr );
      float sea_input = ((motor_configs[i]->sea_gear_ratio) * sea_raw);
      lf_set(sea_out[i],  ((sea_input*100)/motor_configs[i]->gear_ratio) - motor_configs[i]->sea_offset );

      if (PRINT_ENCODER && printcnt>=printcnt_lim) {
        printf("%d  ", (int) (sea_out[i]->value*100));
      }
    }

    for (int i=4; i<7; i++) {
      // 0.362 = 25.4/70
      float sea_raw = ((float) (count[6-i])) * 0.3624 * (1 / motor_configs[i]->sea_cpr );
      float sea_input = ((motor_configs[i]->sea_gear_ratio) * sea_raw);
      lf_set(sea_out[i],  ((sea_input*100)/motor_configs[i]->gear_ratio) - motor_configs[i]->sea_offset );

      if (PRINT_ENCODER && printcnt>=printcnt_lim) {
        printf("%d  ", (int) (sea_out[i]->value*100));
      }
    }


    if (PRINT_ENCODER && printcnt>=printcnt_lim) {
      printf(". qdec: ");
    }

    // Get values for USM encoders
    for (int i=7; i<14; i++) {
      self->_qdec_pos_last[i-7] = self->_qdec_pos[i-7]; // save last position
      self->_qdec_pos[i-7] = ((float) (count[i])) * self->_qdec_convert_motor_to_joint_rad[i-7]; // update the new position
      self->_qdec_vel_est[i-7] = (self->_qdec_pos[i-7] - self->_qdec_pos_last[i-7]) / (interval_sec); // estimate velocity from different of positions over the time between positions

      lf_set(qdec_out[i-7],  self->_qdec_pos[i-7]); // should be units of radians
      lf_set(qdec_vel_out[i-7],  self->_qdec_vel_est[i-7]); // should be units of radians per second

      if (PRINT_ENCODER && printcnt>=printcnt_lim) {
        printf("%d  ", (int) (qdec_out[i-7]->value*100));
      }
    }
    if (PRINT_ENCODER && printcnt>=printcnt_lim) {
      printf("\r\n");
    }


    //if (PRINT_ENCODER){printf("ms to run: [%ld]\r\n", HAL_GetTick()-start);}
    //if (PRINT_ENCODER && printcnt>=printcnt_lim) {
    //  printf("[%ld]", end-start);
    //  printf("| \r\n");
    //}

    printcnt = (printcnt >= printcnt_lim) ? 0 : printcnt+1;

    // estimate joint velocities

  =}


  /*
  reaction(enable) {=
    volatile int read_switch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, read_switch);

    if (read_switch && !last_switch) {
      HAL_UART_Transmit(&huart3, qdec_disable, 1, HAL_MAX_DELAY);
      printf("Disabling Encoders\r\n");
    } else if(!read_switch && last_switch) {
      HAL_UART_Transmit(&huart3, qdec_enable, 1, HAL_MAX_DELAY);
      printf("Enabling Encoders\r\n");
    }
    last_switch = read_switch;

  =}
  */
}
