target C {
  single-threaded: true,
  platform: {
    name: "STM32",
    board: "F446RE"
  },
  files: ["/include_c/stm_comms.h", "/src_c/stm_comms.c"],
}

preamble{=
  #include "stm32f4xx_hal.h"
  #include "main.h"
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>
  #include <ctype.h>

  #include "stm_comms.h"

  #define PRINT_UART 0
=}

reactor UART_Handler(receive_period: time = 10 ms){
    input state_msg: StateMessage
    output cmd_msg: CommandMessage

    state state_msg_: StateMessage
    state cmd_msg_: CommandMessage

    //timer transmit_timer(0 ms, transmit_period)
    timer receive_timer(0 ms, receive_period)

    preamble{=
        // ------
        // Init functions
        // ------

        uint8_t uart_rx_dma_buffer[UART_BUFFER_SIZE];
        uint8_t uart_rx_dma_buffer_copy[UART_BUFFER_SIZE];
        size_t uart_receive_size;

        uint8_t uart_tx_data_buffer[UART_BUFFER_SIZE];

        uint8_t uart_tx_dma_buffer[UART_BUFFER_SIZE];

        void HAL_UART_RxCallback1(){};
        void HAL_UART_TxCallback1(){};

        void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
            //handle_send_packet(uart_rx_dma_buffer, Size);
            uart_receive_size = (size_t)Size;
            memcpy(uart_rx_dma_buffer_copy, uart_rx_dma_buffer, Size); // moves the data over to a buffer that's handled in the receive update
        }
        
    =}

    // method to initiate dma receiving callback loop
    method receiveToIdle_DMA_Init(){=
        HAL_UARTEx_ReceiveToIdle_DMA(&DMA_UART, uart_rx_dma_buffer, UART_BUFFER_SIZE);
    =}

    reaction (startup){=
        receiveToIdle_DMA_Init();
    =}

    //reaction (state_msg){=
    //    self->state_msg_ = state_msg->value;
    //=}

    reaction (state_msg){=
        self->state_msg_ = state_msg->value;
        int data_buffer_len = encode_state_message_to_data_buffer(&self->state_msg_, uart_tx_data_buffer);
        int packet_len = build_packet(uart_tx_dma_buffer, PKT_TYPE_DATA, uart_tx_data_buffer, data_buffer_len);
        // int build_packet(uint8_t *out_buf, PacketType type, uint8_t *data, uint8_t data_len)

        if (packet_len < 1){
            printf("Failed to build packet!");
        }
        else{
            printf("Sending packet with length: %d", packet_len);
            HAL_UART_Transmit_DMA(&DMA_UART, uart_tx_dma_buffer, packet_len);
        }
    =}

    reaction (receive_timer) -> cmd_msg{=
        // bool decode_data_buffer_to_command_message(CommandMessage *msg, uint8_t *data_buffer, size_t data_buffer_len)
        handle_state_message_packet(&self->cmd_msg_, uart_rx_dma_buffer_copy, uart_receive_size);
        lf_set(cmd_msg, self->cmd_msg_);
        
    =}
}