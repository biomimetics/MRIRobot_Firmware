target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

import FFBController from "FFB.lf"
import PIDController from "PID.lf"

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>

  #ifndef __SEA_MODE_ENUM
  #define __SEA_MODE_ENUM

  // Set Motor Mode -> velocity or position control
  typedef enum {
      PID_MODE = 0U,
      TRANS_MODE = 1U,
      FFB_MODE = 2U,
    } SEA_MODE;

  #endif /* __SEA_MODE_ENUM */
=}

reactor SEAController(
    // Control constants
    Ks: float = 40   // SEA control constant

    // SEA transition values
    // SEA_LIM_P: float = 0.2,
    // SEA_LIM_D: float = 100,

    // SEA passthrough values
    // LIM: float = 0.18,
    // CHANGE_P: float = 0.2,
    // CHANGE_D: float = 0.1

    ) {
  input current_pos: float    // current position
  input sea_pos: float        // Current SEA position
  input target_pos: float     // Target position

  input sea_offset: float     // SEA spring offset
  input sea_lim: float        // SEA error limit


  input[3] constants: float;  // Control Constants [Kp, Kd, Ki]

  output out: float
  output pos_joint: float
  output pos_sea: float

  state fsm_state: SEA_MODE = 0
  state last_target: float = 0
  state sea_value: float = 0  // to help with state variables
  state last_sea: float = 0  // to help with state variables

  state last_out: float = 0  // to help with state variables

  state cycle_count: int = 0
  state print_data: bool = true

  force_control = new FFBController(Kp=Ks)
  pos_control = new PIDController()
  
  current_pos -> pos_joint
  sea_pos -> pos_sea
  
  current_pos -> force_control.current_pos
  sea_pos -> force_control.sea_pos
  target_pos -> force_control.target_pos
  sea_offset -> force_control.sea_offset
  sea_lim -> force_control.sea_lim

  current_pos -> pos_control.current_pos
  sea_pos -> pos_control.sea_pos
  target_pos -> pos_control.target_pos
  constants -> pos_control.constants
  sea_offset -> pos_control.sea_offset
  sea_lim -> pos_control.sea_lim

  reaction(sea_pos, target_pos, sea_offset, sea_lim) {=
    float TRANS_CYCLES = 500;  // Number of cycles we stay in transient state


    float SEA_LIM_P = sea_lim->value;
    float SEA_LIM_D = sea_lim->value * 100;
    float m = 0.8;

    // Any necessary operations we have here
    self->sea_value = (1.0 - m)*self->sea_value + m*(sea_pos->value - sea_offset->value*10);
    float sea_diff = (self->sea_value - self->last_sea);
    float sea_error = self->sea_value;
    self->last_sea = self->sea_value;

    bool flag_p = (sea_error > SEA_LIM_P || sea_error < -SEA_LIM_P);
    bool flag_d = (sea_diff > SEA_LIM_D || sea_diff < -SEA_LIM_D);

    if (self->last_target != target_pos->value) {
      self->fsm_state = PID_MODE;
      self->cycle_count = 0;
    }

    /* SEA finite state machine */
    switch(self->fsm_state){
      case PID_MODE: // For PID state
        if (flag_p || flag_d) {
          self->fsm_state = FFB_MODE; // We got to FFB state
          printf("triggered [%d, %d]\r\n", flag_p, (int)(sea_error*100));
        }
        break;
      
      case TRANS_MODE: // For initial movement transient state  
        self->cycle_count++;
        if (flag_p){
          self->fsm_state = FFB_MODE; // We go to FFB state
        } else if(self->cycle_count >= TRANS_CYCLES)
          self->fsm_state = PID_MODE; // We got to standard PID state
        break;
      
      case FFB_MODE: // For Force Feedback state 
        // We stay in this state until we get a new command
        break;      
      }
    self->last_target = target_pos->value;
  =}

  reaction(force_control.out, pos_control.out) -> out {=
    // Caps to decrease the rate of rise and fall
    float RISE_CAP = 10;
    float FALL_CAP = 10;

    switch(self->fsm_state){
      case PID_MODE: // For PID state
        float out_diff = pos_control.out->value - self->last_out;
        float out_val = pos_control.out->value;

        // Apply the rise/fall caps
        if (out_diff > RISE_CAP)
          out_val = self->last_out + RISE_CAP;
        if (out_diff < -FALL_CAP)
          out_val = self->last_out - FALL_CAP;

        lf_set(out, out_val);
        self->last_out = out_val;
        break;

      case FFB_MODE: // For Force Feedback state 
        lf_set(out, force_control.out->value);
        self->last_out = 0;
        break;
    }
  =}
}
