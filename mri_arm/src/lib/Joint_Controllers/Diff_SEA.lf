target C {
    single-threaded: true,
    platform: {
      name: "stm32",
      board: "F446RE"
    }
  }


import PIDController from "PID.lf"
import FFBController from "FFB.lf"


preamble {=
    #include "stm32f4xx_hal.h"
    #include <stdio.h>
    #include <../../../c_include/motor_config.h>

    #ifndef __SEA_MODE_ENUM
    #define __SEA_MODE_ENUM

    // Set Motor Mode -> velocity or position control
    typedef enum {
        PID_MODE = 0U,
        TRANS_MODE = 1U,
        FFB_MODE = 2U,
        } SEA_MODE;


    static float cap_out(float output, float lastout) {
        // Caps to decrease the rate of rise and fall
        float RISE_CAP = 20;
        float FALL_CAP = 20;
        float out_diff = output - lastout;

        // Apply the rise/fall caps
        if (out_diff > RISE_CAP)
            return  lastout + RISE_CAP;
        if (out_diff < -FALL_CAP)
            return  lastout - FALL_CAP;

        return output;
    }

    #endif /* __SEA_MODE_ENUM */

    



=}

reactor Diff_SEA (
    motor_ID0: int = 0, 
    motor_ID1: int = 0
) {
    /*
    [Differential Gear Driver]
    - motor space: position of the indivial USMs
    - joint space: position of the differential gear modules    
    
    */
    input[2] current_pos: float             // Current position in      [motor space]
    input[2] sea_pos: float                 // Current SEA position     [motor space]
    input[2] target_joint: float            // Target positionin        [joint space]


    input[2] sea_offset: float              // sea spring offset        [joint space]
    input[2] sea_lim: float                 // sea error limit          [joint space]
    
    output[2] pos_joint: float              // Current position in      [joint space]
    output[2] pos_sea: float                // Current sea position in  [joint space]
    output[2] speed_out: float              // Speed out in             [motor space]

    timer motor_tick(0, 10 ms)


    /* Local [joint space] conversions of inputs 
        - This is the space in which our controllers will operate on 
        - The joint space model is more similar to how the control 
            inputs will be set */
    state current_pos_JS: float[2]  = {0, 0}// current_pos in       [joint space]
    state sea_pos_JS: float[2]  = {0, 0}    // sea_pos in           [joint space]

    /* FSM state for each joint
        - FSM[0] is for joint 0 and FSM[1] is for joint 1
        - These FSMs operate independantly */
    state fsm_state: SEA_MODE[2] = {0, 0}

    // A number of state variables that are used in calculations
    state last_out: float[2] = {0, 0}
    state sea_value: float[2] = {0, 0}
    state last_sea: float[2] = {0, 0}
    state last_target: float[2] = {0, 0}
    state cycle_count: int[2] = {0, 0}


    /* Note: 
        - The input is a mix of motor space and joint space
            All this will be transformed into joint space
        - The FFB and PID blocks will operate entirely in joint space    */
    pos_control_u0 = new PIDController()
    pos_control_u1 = new PIDController()
    force_control_u0 = new FFBController()
    force_control_u1 = new FFBController()


    // Forward [joint space] targets, sea_offsets, and limits to the controllers
    target_joint -> force_control_u0.target_pos, force_control_u1.target_pos
    target_joint -> pos_control_u0.target_pos, pos_control_u1.target_pos
    sea_offset -> force_control_u0.sea_offset, force_control_u1.sea_offset
    sea_offset -> pos_control_u0.sea_offset, pos_control_u1.sea_offset
    sea_lim -> force_control_u0.sea_lim, force_control_u1.sea_lim
    sea_lim -> pos_control_u0.sea_lim, pos_control_u1.sea_lim

    // control_u0.out, control_u1.out -> speed_out


// --------------------- Joint Space/Motor space conversions  --------------------- 
    // Convert the current_pos input from [motor space] to [joint space]
    //      Then, pass that input value into our controllers
    reaction(current_pos,) -> pos_control_u0.current_pos, pos_control_u1.current_pos {=
        self->current_pos_JS[0] = current_pos[1]->value - current_pos[0]->value;
        self->current_pos_JS[1] = current_pos[1]->value + current_pos[0]->value;

        lf_set(pos_control_u0.current_pos, self->current_pos_JS[0] + self->sea_pos_JS[0]);
        lf_set(pos_control_u1.current_pos, self->current_pos_JS[1] + self->sea_pos_JS[1]);
    =}


    // Convert the sea_pos input from [motor space] to [joint space]
    //      Then, pass that input value into our controllers
    reaction(sea_pos) -> pos_control_u0.sea_pos, pos_control_u1.sea_pos {=
        self->sea_pos_JS[0] = sea_pos[1]->value - sea_pos[0]->value;
        self->sea_pos_JS[1] = sea_pos[1]->value + sea_pos[0]->value;

        lf_set(pos_control_u0.sea_pos, self->sea_pos_JS[0]);
        lf_set(pos_control_u1.sea_pos, self->sea_pos_JS[1]);
    =}


// --------------------- Main loop/state space  --------------------- 
    reaction(sea_pos, target_joint, sea_offset, sea_lim) {=
        float TRANS_CYCLES = 500;  // Number of cycles we stay in transient state
        float m = 0.5;
        

        for (int i=0; i<2; i++) {
            float SEA_LIM_P = sea_lim[i]->value * 1.9;
            float SEA_LIM_D = sea_lim[i]->value * 10;

            // Any necessary operations we have here
            self->sea_value[i] = (1.0 - m)*self->sea_value[i] + m*(sea_pos[i]->value + sea_offset[i]->value);
            float sea_diff = (self->sea_value[i] - self->last_sea[i]);
            float sea_error = self->sea_value[i];
            self->last_sea[i] = self->sea_value[i];

            bool flag_p = (sea_error > SEA_LIM_P || sea_error < -SEA_LIM_P);
            bool flag_d = (sea_diff > SEA_LIM_D || sea_diff < -SEA_LIM_D);

            if (self->last_target[i] != target_joint[i]->value) {
                self->fsm_state[i] = PID_MODE;
                self->cycle_count[i] = 0;
            }

            /* SEA finite state machine */
            switch(self->fsm_state[i]){
            case PID_MODE: // For PID state
                if (flag_p || flag_d) {
                    self->fsm_state[i] = FFB_MODE; // We got to FFB state
                    printf("triggered [%d, %d]\r\n", flag_p, (int)(sea_error*100));
                }
                break;
            
            case TRANS_MODE: // For initial movement transient state  
                self->cycle_count[i]++;
                if (flag_p){
                    self->fsm_state[i] = FFB_MODE; // We go to FFB state
                } else if(self->cycle_count[i] >= TRANS_CYCLES)
                    self->fsm_state[i] = PID_MODE; // We got to standard PID state
                break;
            
            case FFB_MODE: // For Force Feedback state 
                // We stay in this state until we get a new command
                break;      
            }
            self->last_target[i] = target_joint[i]->value;     
        }
    =}


    /*  Here we decide on which output to read from - Either our
            PID controller or FFB controller. 
        
        Each joint-space joint operates independantly and then 
            the inputs are aggrigated and converted into motor space */
    reaction(
        force_control_u0.out, force_control_u1.out, 
        pos_control_u0.out, pos_control_u1.out) -> speed_out {=

        // Create variables for the outputs
        float motor_out[2];

        // Get output values from the controllers
        float pos_out_val[2];
        float force_out_val[2];

        pos_out_val[0] = pos_control_u0.out->value;
        pos_out_val[1] = pos_control_u1.out->value;
        force_out_val[0] = force_control_u0.out->value;
        force_out_val[1] = force_control_u1.out->value;

        // Calculate the desired output for each joint
        for(int i=0; i<2; i++) {
            switch(self->fsm_state[i]){
                case PID_MODE: // For PID state
                    motor_out[i] = cap_out(pos_out_val[i], self->last_out[i]);
                    self->last_out[i] = pos_out_val[i];
                    break;
                case FFB_MODE: // For Force Feedback state 
                    motor_out[i] = force_out_val[i];
                    self->last_out[i] = 0;
                    break;
            }
        }
    
        // Perform transformation from joint space into motor space
        lf_set(speed_out[0], (motor_out[0] - motor_out[1])/2);
        lf_set(speed_out[1], (motor_out[0] + motor_out[1])/2);
    =}



// --------------------- Passthrough values  --------------------- 
    // Convert the current positions in [motor space] -> [joint space]
    reaction(current_pos) -> pos_joint {=
        lf_set(pos_joint[0], (current_pos[0]->value - current_pos[1]->value)/2);
        lf_set(pos_joint[1], (current_pos[0]->value + current_pos[1]->value)/2);
    =}

    // Convert the current sea positions in [motor space] -> [joint space]
    reaction(sea_pos) -> pos_sea {=
        lf_set(pos_sea[0], (sea_pos[0]->value - sea_pos[1]->value)/2);
        lf_set(pos_sea[1], (sea_pos[0]->value + sea_pos[1]->value)/2);
    =}

}








