target C {
    single-threaded: true,
    platform: {
      name: "stm32",
      board: "F446RE"
    }
  }

import SEAController from "SEA.lf"


preamble {=
    #include "stm32f4xx_hal.h"
    #include <stdio.h>
    #include <../../../motor_config.h>
    #include <../../../joint_config.h>
=}

// WORK IN PROGRESS - DO NOT USE
reactor Diff_Joint_Velocity (
    motor_ID0: int = 0, 
    motor_ID1: int = 0
) {
    /*
    [Differential Gear Velocity Controller]
    - Controls two motors to achieve desired joint velocities (pitch & roll)
    */

    input[2] current_vel: float             // Current velocity in      [motor space]
    input[2] target_joint_vel: float        // Target velocity in       [joint space]

    output[2] motor_cmd: float              // Motor velocity commands  [motor space]
    output[2] joint_vel_out: float          // Actual joint velocities  [joint space]

    
    reaction(target_joint_vel) -> motor_cmd {=
        // Transform joint space velocities to motor space velocities
        // For differential: 
        // motor0 = pitch - roll
        // motor1 = pitch + roll
        float pitch = target_joint_vel[0]->value;
        float roll  = target_joint_vel[1]->value;
        
        lf_set(motor_cmd[0], pitch - roll);
        lf_set(motor_cmd[1], pitch + roll);
    =}

    reaction(current_vel) -> joint_vel_out {=
        // Transform motor velocities to joint velocities
        // pitch = (motor0 + motor1)/2
        // roll  = (motor1 - motor0)/2
        float m0 = current_vel[0]->value;
        float m1 = current_vel[1]->value;
        lf_set(joint_vel_out[0], (m0 + m1)/2);
        lf_set(joint_vel_out[1], (m1 - m0)/2);
    =}
}






