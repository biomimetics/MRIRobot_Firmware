target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor FFBController(Kp: float = 12) {
  input current_pos: float
  input sea_pos: float
  input target_pos: float
  output out: float

  input sea_offset: float     // sea spring offset
  input sea_lim: float        // sea error limit


  state fsm_state: int
  state last_sea: float = 0  // to help with state variables

  // The Force Feedback controller (FFB) works to set the force experienced by the sea to zero
  // This is done by sensing the sea displacement and if it is greater than
  // a certian threshold, we will move in a direction
  reaction(target_pos, current_pos, sea_pos, sea_offset, sea_lim) -> out {=
    float pid_out;

    // Use sea offset and limit data
    float CHANGE_P = sea_lim->value * 1;
    float CHANGE_D = sea_lim->value * 10;
    float LIM = sea_lim->value * 0.5; 
    float sea_value = sea_pos->value - sea_offset->value*10;

    float error_p = sea_value;
    float sea_diff = (sea_value - self->last_sea);
    self->last_sea = sea_value;

    bool flag_p = (error_p > CHANGE_P || error_p < -CHANGE_P);
    bool flag_d = (sea_diff > CHANGE_D || sea_diff < -CHANGE_D);
    // FSM for control state.
    // 0: We are in the idle state
    // 1: We are moving
    switch(self->fsm_state){
      case 0: // For idle state
        pid_out = 0;
        self->fsm_state = flag_p || flag_d;
        break;
      case 1: // For movement state
        pid_out = self->Kp * error_p;
        self->fsm_state = (error_p > LIM || error_p < -LIM);
        break;

    }

    pid_out = pid_out < -100? -100: pid_out;
    pid_out = pid_out > 100? 100: pid_out;

    // printf("error: %d, out: %d\r\n", (int)(error_p * 100), (int)pid_out);
    lf_set(out, pid_out);
  =}
}
