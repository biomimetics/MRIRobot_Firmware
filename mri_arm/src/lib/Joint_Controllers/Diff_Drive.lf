target C {
    single-threaded: true,
    platform: {
      name: "stm32",
      board: "F446RE"
    }
  }

import SEAController from "SEA.lf"


preamble {=
    #include "stm32f4xx_hal.h"
    #include <stdio.h>
    #include <../../../motor_config.h>
=}

reactor Diff_Drive (
    motor_ID0: int = 0, 
    motor_ID1: int = 0
) {
    /*
    [Differential Gear Driver]
    - motor space: position of the indivial USMs
    - joint space: position of the differential gear modules    
    
    */
    input[2] current_pos: float         // current position in [motor space]
    input[2] sea_pos: float             // Current SEA position
    input[2] target_joint: float        // Target in [joint space]
    
    output[2] pos_joint: float          // Current position in [joint space]
    output[2] speed_out: float          // Speed out in [motor space]

    state target_motors: float[2] = {0, 0}
    state gear_ratios: float[2] = {0, 0}

    reaction(startup) {=
        self->gear_ratios[0] = motor_configs[self->motor_ID0]->gear_ratio;
        self->gear_ratios[1] = motor_configs[self->motor_ID1]->gear_ratio;
    =}

    control_u0 = new SEAController()
    control_u1 = new SEAController()

    // Forward SEA positions and output speeds
    sea_pos -> control_u0.sea_pos, control_u1.sea_pos
    control_u0.out, control_u1.out -> speed_out

    // Forward current positions, after the gear reduction
    reaction(current_pos) -> control_u0.current_pos, control_u1.current_pos {=
        lf_set(control_u0.current_pos, current_pos[0]->value * self->gear_ratios[0]);
        lf_set(control_u1.current_pos, current_pos[1]->value * self->gear_ratios[1]);
    =}

    
    /* Comvert the targets in [joint space] -> [motor space]
        [Joint Pitch]:   target_joint[0]
        [Joint Roll ]:   target_joint[1]        */
    reaction(target_joint) -> control_u0.target_pos, control_u1.target_pos {=
        lf_set(control_u0.target_pos, target_joint[0]->value + target_joint[1]->value);
        lf_set(control_u1.target_pos, target_joint[0]->value - target_joint[1]->value);
    =}


    /* Convert the current positions in [motor space] -> [joint space]
        [Joint Pitch]:   pos_joint[0]
        [Joint Roll ]:   pos_joint[1]       */
    reaction(current_pos) -> pos_joint {=
        // Apply gear reduction in motor space
        float curr_0_post = current_pos[0]->value * self->gear_ratios[0];
        float curr_1_post = current_pos[1]->value * self->gear_ratios[1];

        // Transform from motor to joint space
        lf_set(pos_joint[0], curr_0_post + curr_1_post);
        lf_set(pos_joint[1], curr_0_post - curr_1_post);
    =}


}








