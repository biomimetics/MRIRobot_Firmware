target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
  #include <stdio.h>

  #include <../../../motor_config.h>
=}

reactor ROS_Interface {
  input[7] current_pos: float
  input[7] current_joint: float
  input[7] joint_pos: float
  input[7] sea_pos: float

  output[7] target_pos_ext: float
  output[7] target_vel_ext: float

  output[7] sea_offset: float
  output[7] sea_lim: float
  output[7] target_state: int

  timer trigger_send(0 ms, 30 ms)
  timer trigger_update(0, 30 ms)

  // Data in format:      'p' + 6x[fp32] -> 25 bytes
  // Data out format:     'e' + 6x[fp32] -> 25 bytes
  preamble {=
    UART_HandleTypeDef huart1;        // usb-c tied uart for computer communication
    extern UART_HandleTypeDef huart2;

    DMA_HandleTypeDef hdma_usart1_rx;
    DMA_HandleTypeDef hdma_usart1_tx;

    static int print_ros = true;

    // Setup Rx and Tx buffers
    static uint8_t rx_buffer[60];
    static uint8_t tx_buffer[60];

    int enc_data[7];
    int sea_data[7];

    float scaled_joint_pos[7]= {0, 0, 0, 0, 0, 0, 0};
    float scaled_joint_vel[7]= {0, 0, 0, 0, 0, 0, 0};

    float scaled_sea_offset[7] = {0, 0, 0, 0, 0, 0, 0};
    float scaled_sea_lim[7]= {0, 0, 0, 0, 0, 0, 0};

    float dir_offsets[7]= {1, 1, 1, 1, 1, -1, -1};

    // We have an inFlight indicator if the DMA is currently sending data
    static volatile int inFlight = 0;

    // +---------------------------------------------------+
    // | Init functions
    // +---------------------------------------------------+

    static void MX_UART1_Init(void) {
      huart1.Instance = USART1;
      huart1.Init.BaudRate = 921600;
      // huart1.Init.BaudRate = 230400;
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
      huart1.Init.StopBits = UART_STOPBITS_1;
      huart1.Init.Parity = UART_PARITY_NONE;
      huart1.Init.Mode = UART_MODE_TX_RX;
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
      HAL_UART_Init(&huart1);
    }

    static void MX_DMA_Init(void) {
      __HAL_RCC_DMA2_CLK_ENABLE();
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);

    }

    // +---------------------------------------------------+
    // | Helper functions
    // +---------------------------------------------------+
    static float get_target(uint8_t* data) {
      float count = data[0] + (data[1]<<8) + (data[2]<<16) + (data[3]<<24) + (data[4]<<32);
      return count;
    }

    void print_resp(float* data) {
      printf("      [%d, %d, %d, %d, %d, %d, %d]\r\n", 
                        (int)(data[0]*100), (int)(data[1]*100), (int)(data[2]*100), (int)(data[3]*100), 
                        (int)(data[4]*100), (int)(data[5]*100), (int)(data[6]*100));
    }

    float uncompress_data(uint8_t lower, uint8_t upper) {
      return ((float) ((int16_t)lower  + (int16_t)(upper<<8)))/1000;
    }

    // +---------------------------------------------------+
    // | UART DMA Callback functions
    // +---------------------------------------------------+

    // UART recieve callback
    void HAL_UART_RxCallback1() {
      if (rx_buffer[0] == 'p') {              // Change joint position target
        set_joint_pos_data();
      } else if (rx_buffer[0] == 'v') {       // Change joint velocity target
        set_joint_vel_data();
      } else if (rx_buffer[0] == 'o') {       // Change joint sea offset
        set_sea_offset_data();
      } else if (rx_buffer[0] == 'l') {       // Change joint sea limit
        set_sea_limit_data();
      } else {
        printf("Got bad data\r\n");
      }

      HAL_UART_Receive_DMA(&huart1, rx_buffer, 15);
    }

    // UART transmit callback
    void HAL_UART_TxCallback1() {
      inFlight = 0;
    }

    // When the rx_buffer command is a [set joint position] command
    void set_joint_pos_data() {
      for (int i=0; i<7; i++) {
        scaled_joint_pos[i] = uncompress_data(rx_buffer[(i*2)+2], rx_buffer[(i*2)+1]);
      }

      if (print_ros)  {
        // printf("got [JOINT POS]: \r\n");
        // print_resp(scaled_joint_pos);
      }
    }

    // When the rx_buffer command is a [set joint velocity] command
    void set_joint_vel_data() {
      for (int i=0; i<7; i++) {
        scaled_joint_vel[i] = uncompress_data(rx_buffer[(i*2)+2], rx_buffer[(i*2)+1]);
      }

      if (print_ros)  {
        printf("got [JOINT VEL]: \r\n");
        // print_resp(scaled_joint_vel);
      }
    }

    // Functions for setting relevant info for seas
    void set_sea_offset_data() {
      for (int i=0; i<7; i++) {
        scaled_sea_offset[i] = uncompress_data(rx_buffer[(i*2)+2], rx_buffer[(i*2)+1]);
      }
    }
    void set_sea_limit_data() {
      for (int i=0; i<7; i++) {
        scaled_sea_lim[i] = uncompress_data(rx_buffer[(i*2)+2], rx_buffer[(i*2)+1]);
      }
    }
  =}

  reaction(startup) {=
    // Setup UART interfaces
    MX_DMA_Init();
    MX_UART1_Init();

    // Prep ROS bridge DMA recieve
    HAL_UART_Receive_DMA(&huart1, rx_buffer, 15);

    for (int i=0; i<7; i++) 
      scaled_sea_lim[i] = motor_configs[i]->lim;
  =}


  // Send current state over the bridge
  reaction(trigger_send) {=
    if (!inFlight) {
      inFlight = 1; // Indicate that we are currently sending data
      int num = sprintf(tx_buffer,"e%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n", 
            enc_data[0], enc_data[1], enc_data[2], enc_data[3], enc_data[4], enc_data[5], enc_data[6], 
            sea_data[0], sea_data[1], sea_data[2], sea_data[3], sea_data[4], sea_data[5], sea_data[6]);
      HAL_UART_Transmit_DMA(&huart1, tx_buffer, num);
    }
  =}

  // Update our target position from most recently recieved
  reaction(trigger_update) -> target_pos_ext, target_vel_ext, sea_offset, sea_lim{=
    for (int i=0; i<7; i++) {
      lf_set(target_pos_ext[i], scaled_joint_pos[i]);   // Update target positions
      lf_set(target_vel_ext[i], scaled_joint_vel[i]);   // Update target velocityes
      lf_set(sea_offset[i], scaled_sea_offset[i]);      // Update sea offset values
      lf_set(sea_lim[i], scaled_sea_lim[i]);            // Update sea limits
    }
  =}

  // Update our current USM position
  reaction(current_joint) {=
    for (int i=0; i<7; i++) {
      enc_data[i] = (int)(current_joint[i]->value * 1000) * dir_offsets[i];
    }
  =}

  // Update our current sea position
  reaction(sea_pos) {=
    for (int i=0; i<7; i++) {
      sea_data[i] = (int)(sea_pos[i]->value * 1000);
    }
  =}
}
