target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
  #include <stdio.h>

  #include <../../../motor_config.h>
  #include <../../../joint_config.h>
  #include <../../../sm_config.h>

  #define DMA_TX_BUFFER_SIZE 60
  #define DMA_RX_BUFFER_SIZE 60
  #define DMA_RECEIVE_SIZE 15
=}

reactor ROSInterface (send_period: time = 10 ms, recieve_period: time = 10 ms, period_offset: time = 5 ms){
  //input[7] current_pos: float // unused!
  //input[7] joint_pos: float // unused!
  //input[7] sea_pos: float // unused!
  //output[7] target_state: int // unused!

  //inputs from motor controller to send back to ROS
  input[7] current_joint: float // position of joints from usm encoders
  input[7] current_joint_sea: float // position of seas from sea encoders
  
  

  // outputs for sending to motor controller
  output[7] target_pos_ext: float
  output[7] target_vel_ext: float

  output[7] sea_offset: float
  output[7] sea_lim: float

  // outputs for sending state changes
  output set_mode_change: MODE_ENUM


  // trigger timers
  timer trigger_send(0 ms, send_period)
  timer trigger_update(period_offset, recieve_period)
  timer trigger_test(0 ms, 2000 ms)

  // Data in format:      'p' + 6x[fp32] -> 25 bytes
  // Data out format:     'e' + 6x[fp32] -> 25 bytes
  preamble {=
    UART_HandleTypeDef huart1;        // usb-c tied uart for computer communication
    extern UART_HandleTypeDef huart2;

    DMA_HandleTypeDef hdma_usart1_rx;
    DMA_HandleTypeDef hdma_usart1_tx;

    static int print_ros = true;

    // Setup Rx and Tx buffers
    //static uint16_t dma_receive_size = 15; // moved to preprocessor define statement

    static uint8_t rx_buffer[DMA_RX_BUFFER_SIZE];
    static uint8_t tx_buffer[DMA_TX_BUFFER_SIZE];
    bool flag_receive_to_idle_events_not_yet_triggered = true;
    bool flag_handshake_success = false;

    float joint_dir[7]= {1, 1, 1, 1, 1, -1, -1};

    int enc_data[7];
    int sea_data[7];

    float scaled_joint_pos[7]= {0, 0, 0, 0, 0, 0, 0};
    float scaled_joint_vel[7]= {0, 0, 0, 0, 0, 0, 0};

    float scaled_sea_offset[7] = {0, 0, 0, 0, 0, 0, 0};
    float scaled_sea_lim[7]= {1000, 1000, 1000, 1000, 1000, 1000, 1000};

    float dir_offsets[7]= {1, 1, 1, 1, 1, -1, -1};
    int loopback_offset[7]= {0, 0, 0, 0, 0, 0, 0};

    // We have an inFlight indicator if the DMA is currently sending data
    static volatile int inFlight = 0;

    bool flag_update_set_mode_change = false;
    char desired_state_char = '0';
    // +---------------------------------------------------+
    // | Init functions
    // +---------------------------------------------------+

    // fast usbc, should be /dev/ttyUSB0 on ros side
    static void MX_UART1_Init(void) {
      huart1.Instance = USART1;
      huart1.Init.BaudRate = 921600;
      // huart1.Init.BaudRate = 230400;
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
      huart1.Init.StopBits = UART_STOPBITS_1;
      huart1.Init.Parity = UART_PARITY_NONE;
      huart1.Init.Mode = UART_MODE_TX_RX;
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
      HAL_UART_Init(&huart1);
    }

    static void MX_DMA_Init(void) {
      __HAL_RCC_DMA2_CLK_ENABLE();
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);

    }

    // +---------------------------------------------------+
    // | Helper functions
    // +---------------------------------------------------+

    // UNUSED!
    static float get_target(uint8_t* data) {
      float count = data[0] + (data[1]<<8) + (data[2]<<16) + (data[3]<<24) + (data[4]<<32);
      return count;
    }

    void print_resp(float* data) {
      printf("      [%d, %d, %d, %d, %d, %d, %d]\r\n", 
                        (int)(data[0]*100), (int)(data[1]*100), (int)(data[2]*100), (int)(data[3]*100), 
                        (int)(data[4]*100), (int)(data[5]*100), (int)(data[6]*100));
    }

    float uncompress_data(uint8_t lower, uint8_t upper) {
      return ((float) ((int16_t)lower  + (int16_t)(upper<<8)))/1000;
    }

    // assumes that the checksum_index is the last byte in the message
    bool checkChecksum(int checksum_index){
      //uint8_t rx_buffer[60]; // recieving buffer
      int computed_checksum = 0;
      for (int i = 0; i < checksum_index; i++){
        computed_checksum += rx_buffer[i];
      }
      if (computed_checksum == rx_buffer[checksum_index]){
        return true;
      }
      else
      {
        printf("Checksum failed! Expected %d, but computed %d.", rx_buffer[checksum_index], computed_checksum);
        return false;
      }
    }

    void appendChecksum(int message_length){
      int computed_checksum = 0;
      
      return;
    }
    // +---------------------------------------------------+
    // | UART DMA Callback functions
    // +---------------------------------------------------+

    // UART receive callback
    /*
    void HAL_UART_RxCallback1() {
      if (rx_buffer[0] == 'p') {              // Change joint position target
        set_joint_pos_data();
      } else if (rx_buffer[0] == 'v') {       // Change joint velocity target
        set_joint_vel_data();
      } else if (rx_buffer[0] == 'o') {       // Change joint sea offset
        set_sea_offset_data();
      } else {
        printf("Got bad data\r\n");
      }
      HAL_UART_Receive_DMA(&huart1, rx_buffer, 15);
    }
    */

    // TODO: depreciate this!
    void handle_usbc_recieve() {
      if (rx_buffer[0] == 'p') {              // Change joint position target
        set_joint_pos_data();
      } else if (rx_buffer[0] == 'v') {       // Change joint velocity target
        set_joint_vel_data();
      } else if (rx_buffer[0] == 'o') {       // Change joint sea offset
        set_sea_offset_data();
      }  else if (rx_buffer[0] == 's') {
        trigger_mode_change();
      } else {
        printf("Got unexpected leading character.\r\n");
      }
      
      // DMA_RECEIVE_SIZE doesn't have to be a constant. There's probably a better way of
      HAL_UART_Receive_DMA(&huart1, rx_buffer, DMA_RECEIVE_SIZE);
    }

    void handle_usbc_recieve_to_idle() {
      if (rx_buffer[0] == 'p') {              // Change joint position target
          set_joint_pos_data();
      } 
      else if (rx_buffer[0] == 'v') {       // Change joint velocity target
          set_joint_vel_data();
      } 
      else if (rx_buffer[0] == 'o') {       // Change joint sea offset
          set_sea_offset_data();
      } 
      else if (rx_buffer[0] == 's') {      // Change high level mode
          trigger_mode_change();
      }
      else if (rx_buffer[0] == 'z'){
          update_handshake_status();
      }
      else {
        printf("Got unexpected leading character.\r\n");
      }
      
      // if callbacks haven't been triggered yet, start receiving until they get triggered
      if (flag_receive_to_idle_events_not_yet_triggered){
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buffer, DMA_RX_BUFFER_SIZE);
      }
    }

    // UART transmit callback
    void HAL_UART_TxCallback1() {
      inFlight = 0;
    }

    void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
      flag_receive_to_idle_events_triggered = false;
      RxDataLen = Size; // RxDataLen is the size of the received data, set by the sender
      HAL_UART_Transmit(&huart1, rx_buffer, RxDataLen, 100); // echos back the received data (useful for debugging and handshaking)
      HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buffer, DMA_RX_BUFFER_SIZE); //UART_RX_BUFFER_SIZE);
    }

    /*##### 
    # helper functions for handling inputs from ROS connection
    #####*/

    // When the rx_buffer command is a [set joint position] command
    void set_joint_pos_data() {
      for (int i=0; i<7; i++) {
        scaled_joint_pos[i] = joint_dir[i] * uncompress_data(rx_buffer[(i*2)+2], rx_buffer[(i*2)+1]);
      }

      if (print_ros)  {
        printf("got [JOINT POS]: \r\n");
        print_resp(scaled_joint_pos);
      }
    }

    // When the rx_buffer command is a [set joint velocity] command
    void set_joint_vel_data() {
      for (int i=0; i<7; i++) {
        scaled_joint_vel[i] = uncompress_data(rx_buffer[(i*2)+2], rx_buffer[(i*2)+1]);
      }

      if (print_ros)  {
        printf("got [JOINT VEL]: \r\n");
        print_resp(scaled_joint_vel);
      }
    }

    // Functions for setting relevant info for seas
    void set_sea_offset_data() {
      for (int i=0; i<7; i++) {
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
          scaled_sea_offset[i] = 0;
          loopback_offset[i] = 0;
        } else {
          scaled_sea_offset[i] = uncompress_data(rx_buffer[(i*2)+2], rx_buffer[(i*2)+1]);
          loopback_offset[i] = (int)(1000 * scaled_sea_offset[i]);
        }
      }
    }

    // this function assumes rx_buffer[1] has a char for '0', '1', '2', or '3' for now. Consider changing this. Also may need to make this a reactor method.
    void trigger_mode_change() {
      // rx_buffer[0] == 's'
      if ((rx_buffer[1] == '0') || (rx_buffer[1] == '1') || (rx_buffer[1] == '2') || (rx_buffer[1] == '3')){
        flag_update_set_mode_change = true;
        desired_state_char = rx_buffer[1];
      }
      else{
        flag_update_set_mode_change = false;
        desired_state_char = '0';
      }
      
      /*
      char received_state = rx_buffer[1];
      switch (received_state) {
        case '0': // set mode to idle
          lf_set(set_mode_change, 0); // make sure all of these align with defs in mode_enum from sm_config.h!!! 
        case '1': // set mode to home
          lf_set(set_mode_change, 1);
        case '2': // set mode to run
          lf_set(set_mode_change, 2);
        case '3': // set mode to run
          lf_set(set_mode_change, 3);
        
        case '0': // set mode to idle
          lf_set(set_mode_change, SET_IDLE); // make sure all of these align with defs in mode_enum from sm_config.h!!! 
        case '1': // set mode to home
          lf_set(set_mode_change, SET_HOMING);
        case '2': // set mode to run
          lf_set(set_mode_change, SET_RUN_POS);
        case '3': // set mode to run
          lf_set(set_mode_change, SET_RUN_VEL);
        */
      //}
      //return;
    }
    
    void update_handshake_status(){
      if ((rx_buffer[0] == 'z') && (rx_buffer[1] == 1)) {
            flag_handshake_success = true;
          }
          else{
            flag_handshake_success = false;
          }
      return;
    }

    /*##### 
    # helper functions for testing
    #####*/
    // add test data function to simulate ROS interface
    void RxCallbackTest() {
      rx_buffer[0] = 'v';
      for (int i = 1; i < 14; i=i+2){
        rx_buffer[i] = 2; rx_buffer[i+1]=3;
      }
      HAL_UART_RxCallback1();
    }

  =}


  reaction(startup) {=
    // Setup UART interfaces
    MX_DMA_Init();
    MX_UART1_Init();

    // Prep ROS bridge DMA recieve
    HAL_UART_Receive_DMA(&huart1, rx_buffer, 15);

    /* Configure Switch pins : PC1 */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

    for (int i=0; i<7; i++) {
      scaled_sea_lim[i] = joint_configs[i]->lim;
      scaled_sea_offset[i] = 0;
    }
      
  =}

  reaction(trigger_test) {=
    printf("ROS_Interface trigger_update\r\n");
    RxCallbackTest();
   
  =}

  /*##### 
    # Input reactions
    #####*/

  // Update our current USM position to send to ROS
  reaction(current_joint) {=
    for (int i=0; i<7; i++) {
      enc_data[i] = (int)(current_joint[i]->value * 1000) * dir_offsets[i];
    }
  =}

  // Update our current sea position to send to ROS
  reaction(current_joint_sea) {=
    for (int i=0; i<7; i++) {
      sea_data[i] = (int)(current_joint_sea[i]->value * 1000);
    }
  =}

  // Send current state over the bridge
  reaction(trigger_send) {=
    if (!inFlight) {
      inFlight = 1; // Indicate that we are currently sending data
      int num = sprintf(tx_buffer,"e%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n", 
            enc_data[0], enc_data[1], enc_data[2], enc_data[3], enc_data[4], enc_data[5], enc_data[6], 
            sea_data[0], sea_data[1], sea_data[2], sea_data[3], sea_data[4], sea_data[5], sea_data[6],
            loopback_offset[0], loopback_offset[1], loopback_offset[2], loopback_offset[3], loopback_offset[4], loopback_offset[5], loopback_offset[6]);
      HAL_UART_Transmit_DMA(&huart1, tx_buffer, num);
    }
  =}

  /*##### 
    # Output reactions
    #####*/

  reaction(trigger_update) -> set_mode_change, target_pos_ext, target_vel_ext, sea_offset, sea_lim{=
    // handle receiving new data from ROS
    handle_usbc_receive_to_idle();

    // handle mode changes if they occurr
    if (flag_update_set_mode_change){
      switch (desired_state_char){
        case '0': // set mode to idle
          lf_set(set_mode_change, SET_IDLE); // make sure all of these align with defs in mode_enum from sm_config.h!!! 
        case '1': // set mode to home
          lf_set(set_mode_change, SET_HOMING);
        case '2': // set mode to run
          lf_set(set_mode_change, SET_RUN_POS);
        case '3': // set mode to run
          lf_set(set_mode_change, SET_RUN_VEL);
      }
        
      flag_update_set_mode_change = false;
    }

    // if handshake from handle_usbc_receive_to_idle is good, set the received motor positions
    for (int i=0; i<7; i++) {
      lf_set(target_pos_ext[i], scaled_joint_pos[i]);   // Update target positions
      lf_set(target_vel_ext[i], scaled_joint_vel[i]);   // Update target velocities
      lf_set(sea_lim[i], scaled_sea_lim[i]);      // Update sea offset values


      HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1));
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
        lf_set(sea_offset[i], 0);      // Update sea offset values
      } else {
        lf_set(sea_offset[i], scaled_sea_offset[i]);      // Update sea offset values
      }
    }
    // after we set most recently received commands, reset handshake flag back to false to wait for new handshake
    flag_handshake_success = false;
    
  =}

}
