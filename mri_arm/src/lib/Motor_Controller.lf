target C {
  single-threaded: true,
  platform: {
    name: "STM32",
    board: "F446RE"
  }
}


import FFBController from "Joint_Controllers/FFB.lf"
import PIDController from "Joint_Controllers/PID.lf"
import SEAController from "Joint_Controllers/SEA.lf"
import Diff_Drive from "Joint_Controllers/Diff_Drive.lf"


preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"

  #ifndef __MOTOR_MODE_ENUM
  #define __MOTOR_MODE_ENUM

  // Set Motor Mode -> velocity or position control
  typedef enum {
      MODE_POS = 0U,
      MODE_VEL = 1U,
    } MOTOR_MODE;
  

  // Set Target Mode -> Internal or external control
  typedef enum {
      MODE_INT = 0U,
      MODE_EXT = 1U,
    } TARGET_SRC;

  #endif /* __MOTOR_MODE_ENUM */
=}

// Import and/or declare reactor classes.
reactor MotorController(refresh_period: time = 5 ms) {
  input[7] target_sel: MOTOR_MODE

  input[7] target_vel_int: float
  input[7] target_vel_ext: float
  input[7] target_pos_int: float
  input[7] target_pos_ext: float

  input[7] sea_offset: float
  input[7] sea_lim: float

  input[7] qdec_pos: float
  input[7] qdec_sea: float

  input target_mode: TARGET_SRC

  output[7] speed: float
  output[7] current_joint: float

  state target_vel: float[7] = {0, 0, 0, 0, 0, 0, 0}
  state target_pos: float[7] = {0, 0, 0, 0, 0, 0, 0}

  state speed_spc: float[7] = {0, 0, 0, 0, 0, 0, 0}
  state speed_posc: float[7] = {0, 0, 0, 0, 0, 0, 0}

  timer trigger(0, refresh_period)
  control_u0 = new SEAController()
  control_j0 = new Diff_Drive(motor_ID0=1, motor_ID1=2)
  control_j1 = new Diff_Drive(motor_ID0=3, motor_ID1=4)
  control_j2 = new Diff_Drive(motor_ID0=5, motor_ID1=6)
    

  // Feed in the current positions
  qdec_pos ->
    control_u0.current_pos,
    control_j0.current_pos,
    control_j1.current_pos,
    control_j2.current_pos

  // feed in the SEA positions
  qdec_sea ->
    control_u0.sea_pos,
    control_j0.sea_pos,
    control_j1.sea_pos,
    control_j2.sea_pos
    
  control_u0.pos_joint, 
  control_j0.pos_joint, 
  control_j1.pos_joint,
  control_j2.pos_joint 
    -> current_joint

  sea_offset ->
    control_u0.sea_offset,
    control_j0.sea_offset,
    control_j1.sea_offset,
    control_j2.sea_offset

  sea_lim ->
    control_u0.sea_lim,
    control_j0.sea_lim,
    control_j1.sea_lim,
    control_j2.sea_lim


  // +----------------------------------------------------------------+
  // | MUX between the different target modes
  // +----------------------------------------------------------------+
  reaction(target_vel_int, target_vel_ext, target_mode) {=
    if (target_mode->value == MODE_INT) {
      for(int i=0; i<7; i++)
        self->speed_spc[i] = target_vel_int[i]->value;
    } else if(target_mode->value == MODE_EXT) {
      for(int i=0; i<7; i++)
        self->speed_spc[i] = target_vel_ext[i]->value;
    }
  =}

  reaction(target_pos_int, target_pos_ext, target_mode) {=
    if (target_mode->value == MODE_INT) {
      for(int i=0; i<7; i++)
        self->target_pos[i] = target_pos_int[i]->value;
    } else if(target_mode->value == MODE_EXT) {
      for(int i=0; i<7; i++)
        self->target_pos[i] = target_pos_ext[i]->value;
    }
  =}
  // +----------------------------------------------------------------+


  // +----------------------------------------------------------------+
  // | Use targets to get desired speeds
  // +----------------------------------------------------------------+
  reaction(trigger) -> 
      control_u0.target_pos,
      control_j0.target_joint,
      control_j1.target_joint,
      control_j2.target_joint
      {=
    // printf("UPDATE VAL: %d\r\n", (int)(100 * self->target_pos[5]));
    lf_set(control_u0.target_pos,      self->target_pos[0]);
    lf_set(control_j0.target_joint[0], self->target_pos[1]);
    lf_set(control_j0.target_joint[1], self->target_pos[2]);
    lf_set(control_j1.target_joint[0], self->target_pos[3]);
    lf_set(control_j1.target_joint[1], self->target_pos[4]);
    lf_set(control_j2.target_joint[0], self->target_pos[5]);
    lf_set(control_j2.target_joint[1], self->target_pos[6]);
    
  =}

  // Read out the positional control speed values
  reaction(
      control_j0.speed_out,
      control_j1.speed_out,
      control_j2.speed_out,
      control_u0.out) {=
    self -> speed_posc[0] = control_u0.out->value;
    self -> speed_posc[1] = control_j0.speed_out[0]->value;
    self -> speed_posc[2] = control_j0.speed_out[1]->value;
    self -> speed_posc[3] = control_j1.speed_out[0]->value;
    self -> speed_posc[4] = control_j1.speed_out[1]->value;
    self -> speed_posc[5] = control_j2.speed_out[0]->value;
    self -> speed_posc[6] = control_j2.speed_out[1]->value;
    
  =}

  
  // +----------------------------------------------------------------+
  // | Set speed output
  // +----------------------------------------------------------------+
  reaction(trigger, target_sel) -> speed{=
    // We use this to set either the speed or position of the motors
    for(int i=0; i<7; i++)
      lf_set(speed[i], (target_sel[i]->value == MODE_POS)? self->speed_posc[i]: self->speed_spc[i]);
  =}
}
