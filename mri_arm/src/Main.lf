target C {
  single-threaded: true,
  platform: {
    name: "STM32",
    board: "F446RE"
  }
}

import QDEC from "lib/Drivers/Encoder.lf"
import USM from "lib/Drivers/USM.lf"
import HomeController from "lib/Home_Controller.lf"
import MotorController from "lib/Motor_Controller.lf"
import ROS_Interface from "lib/ROS_Interface.lf"

preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
=}

// Import and/or declare reactor classes.
main reactor {
  preamble {=
    extern UART_HandleTypeDef huart2;
    UART_HandleTypeDef huart4;
    UART_HandleTypeDef huart5;
    UART_HandleTypeDef huart6;


    // Target positions
    float target_pos[7] =   {0, 0, 0, 0, 0, 0, 0};
    float target_speed[7] = {0, 0, 0, 0, 0, 0, 0};
    bool target_sel[7] =    {0, 0, 0, 0, 0, 0, 0};
    static int at_home = 0;

    static void MX_GPIO_Init(void) {
      GPIO_InitTypeDef GPIO_InitStruct = {0};
      __HAL_RCC_GPIOA_CLK_ENABLE();
      __HAL_RCC_GPIOB_CLK_ENABLE();
      __HAL_RCC_GPIOH_CLK_ENABLE();

      /* Configure output LED pins: PH0, PH1, PB*/
      HAL_GPIO_WritePin(GPIOH, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
      GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
      GPIO_InitStruct.Pin = GPIO_PIN_15;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

      /* Configure Switch pins : PC0, PC1 */
      GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    }

    extern UART_HandleTypeDef huart3;
    extern UART_HandleTypeDef huart1;

    // Define empty function handlers for UART callbacks
    void HAL_UART_RxCallback3();
    void HAL_UART_RxCallback1();

    void HAL_UART_TxCallback1();

    // Define global recieve callback
    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart->Instance == USART3) {
        HAL_UART_RxCallback3();
      } else if (huart->Instance == USART1) {
        HAL_UART_RxCallback1();
      }
    }

    // Define global recieve callback
    void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart == &huart1) {
        HAL_UART_TxCallback1();
      }
    }
  =}
  
  timer sys_tick(0 ms, 10 ms)           // Main system clock we will use inside main
  timer switch_motor(0 ms, 3000 ms)     // Switch moto position state
  state count: int = 1

  qdec = new QDEC()                           // FPGA-based QDEC Encoders
  usm = new USM()                             // Ultrasonic motor controllers
  ros_controller = new ROS_Interface()        // ROS UART Interface
  motor_controller = new MotorController()    // Main Motor driver + controller
  home_controller = new HomeController()      // Used to home the motors

  // Route encoder information to relevant reactors
  qdec.qdec_out -> motor_controller.qdec_pos
  qdec.qdec_out -> ros_controller.current_pos
  qdec.sea_out -> motor_controller.qdec_sea
  qdec.sea_out -> ros_controller.sea_pos

  // Route joint targets/information
  motor_controller.current_joint -> ros_controller.current_joint
  motor_controller.speed -> usm.speed
  ros_controller.target_pos_ext -> motor_controller.target_pos_ext
  ros_controller.target_vel_ext -> motor_controller.target_vel_ext

  ros_controller.sea_offset -> motor_controller.sea_offset
  ros_controller.sea_lim -> motor_controller.sea_lim

  reaction(startup) {=
    // Prep all GPIO values
    MX_GPIO_Init();

  =}


  initial mode STARTUP {
    reaction(sys_tick) -> qdec.reset_qdec, reset(RUN), reset(HOME) {=
      lf_set(qdec.reset_qdec, true);
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
        printf("\r\n");
        printf("==============================\r\n");
        printf("==== [Startup: Warm Boot] ====\r\n");
        printf("==============================\r\n\r\n");
        lf_set_mode(RUN);
      } else {
        printf("\r\n");
        printf("==============================\r\n");
        printf("==== [Startup: Cold Boot] ====\r\n");
        printf("==============================\r\n\r\n");
        lf_set_mode(HOME);

      }
    =}

  }
  
  mode HOME {
    // +-----------------------------------------------------------------------+
    // | Robot Homing
    // +-----------------------------------------------------------------------+
    qdec.qdec_out -> home_controller.current_pos
    qdec.sea_out -> home_controller.sea_pos
    timer home_pulse(50 ms, 100 ms)
    reaction(home_pulse) -> qdec.reset_qdec, reset(RUN) {=
      if (at_home) {
        for(int i=0; i<7; i++) {
          target_pos[i] = 0;
        }
        lf_set(qdec.reset_qdec, true);
        lf_set_mode(RUN);
        printf("--- Finished Homing ---\r\n");
      }
    =}

    reaction(home_controller.is_home) {=
      at_home = home_controller.is_home->value;
    =}

    reaction(home_controller.motor_speed) {=
      for(int i=0; i<7; i++) {
        target_speed[i] = home_controller.motor_speed[i]->value;
      }
    =}

    reaction(sys_tick) -> motor_controller.target_mode, motor_controller.target_sel, motor_controller.target_vel_int {=
      for (int i=0; i<7; i++) {
        lf_set(motor_controller.target_mode, MODE_INT);                   // Set source as internal
        lf_set(motor_controller.target_sel[i], MODE_VEL);                 // Set the mode as velocity control
        lf_set(motor_controller.target_vel_int[i], target_speed[i]);      // Set the target velocity
      }
    =}
  }

  // Run state for when the robot is in operation
  mode RUN {
    // +-----------------------------------------------------------------------+
    // | Set the motor control values
    // |    - Switch between velocity or position control
    // |    - Switch between internal or external control
    // +-----------------------------------------------------------------------+
    reaction(sys_tick) -> motor_controller.target_sel, motor_controller.target_mode {=
      for (int i=0; i<7; i++) {
        lf_set(motor_controller.target_sel[i], MODE_POS);   // Position control
        // lf_set(motor_controller.target_sel[i], MODE_VEL);   // Velocity control
      }

      lf_set(motor_controller.target_mode, MODE_INT);   // Internal control moder
      // lf_set(motor_controller.target_mode, MODE_EXT);   // External control moder
    =}



    // +-----------------------------------------------------------------------+
    // | Reactors for debugging/testing
    // +-----------------------------------------------------------------------+
    reaction(switch_motor) {=
      if (self->count == 0) {
        self->count = 1;
        printf("\nSTOP\r\n");
      } else if (self->count == 1) {
        self->count = 2;
      } else if (self->count == 2) {
        printf("\n\nSTOP\r\n");
        self->count = 3;
      } else if (self->count == 3) {
        self->count = 4;
      } else if (self->count == 4) {
        self->count = 5;
      } else {
        self->count = 0;
      }
      printf("        switch state: %d\r\n", self->count);
    =}

    // Set the internal target position and/or velocity
    reaction(sys_tick) -> motor_controller.target_pos_int, motor_controller.target_vel_int {=
      HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, self->count == 0);
      if (self->count == 0) {
        for (int i=0; i<7; i++) {
          lf_set(motor_controller.target_pos_int[i], 0.5);
          lf_set(motor_controller.target_vel_int[i], 40);
        }
      } else if (self->count == 1) {
        for (int i=0; i<7; i++) {
          lf_set(motor_controller.target_pos_int[i], 0);
          lf_set(motor_controller.target_vel_int[i], 0);
        }
      } else if (self->count == 2) {
        for (int i=0; i<7; i++) {
          lf_set(motor_controller.target_pos_int[i], 0.5);
          lf_set(motor_controller.target_vel_int[i], 40);
        }
      } else if (self->count == 3) {
        for (int i=0; i<7; i++) {
          lf_set(motor_controller.target_pos_int[i], 0);
          lf_set(motor_controller.target_vel_int[i], 0);
        }
      } else if (self->count == 4) {
        for (int i=0; i<7; i++) {
          lf_set(motor_controller.target_pos_int[i], 0.5);
          lf_set(motor_controller.target_vel_int[i], 40);
        }
      } else {
        for (int i=0; i<7; i++) {
          lf_set(motor_controller.target_pos_int[i], 0);
          lf_set(motor_controller.target_vel_int[i], 0);
        }
      }
    =}
  }
}