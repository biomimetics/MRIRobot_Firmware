target C {
  single-threaded: true,
  platform: {
    name: "STM32",
    board: "F446RE"
  }
}

import QDEC from "lib/Drivers/Encoder.lf"
import USM from "lib/Drivers/USM.lf"
import HomeController from "lib/Home_Controller.lf"
import MotorController from "lib/Motor_Controller.lf"
import ROSInterface from "lib/ROS_Interface.lf"
import ModeMachine from "lib/Mode_Machine.lf"

preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"
  //#include "stm32_startup.h"
  #include "main.h"

  extern UART_HandleTypeDef huart2;
  =}

// Import and/or declare reactor classes.
main reactor {
  preamble {=
  
    /*
    int _write(int file, char *ptr, int len){
        HAL_UART_Transmit(&PRINT_UART, (uint8_t *)ptr, len, HAL_MAX_DELAY);
        //HAL_UART_Transmit(&huart6, (uint8_t *)ptr, len, HAL_MAX_DELAY);

        // HAL_UART_Transmit_IT(&huart2, (uint8_t *)ptr, len);
        return len;
    }
    */
    extern UART_HandleTypeDef huart1; // make sure these need to be defined here or not
    extern UART_HandleTypeDef huart3;
    extern UART_HandleTypeDef huart4;
    extern UART_HandleTypeDef huart5;
    //UART_HandleTypeDef huart6; // def in ROS_Interface.lf


    // Target positions
    float target_pos[7] =   {0, 0, 0, 0, 0, 0, 0}; // unused
    float target_speed[7] = {0, 0, 0, 0, 0, 0, 0}; // unused
    bool target_sel[7] =    {0, 0, 0, 0, 0, 0, 0};
    static int at_home = 0; // unused

    
    int stm32_init(void){
      HAL_Init();

      SystemClock_Config();

      MX_GPIO_Init();
      MX_DMA_Init();
      MX_UART4_Init();
      MX_USART1_UART_Init();
      MX_USART3_UART_Init();
      MX_USART6_UART_Init();
      MX_TIM3_Init();
      MX_TIM4_Init();
      MX_RTC_Init();
      MX_USART2_UART_Init();

      printf("\r\n");
      printf("~~~ STM32 START ~~~ \r\n");
      printf("\r\n");

      //HAL_START_DMA(); // not sure if needed
      //main();
      return 0;
    }



    // Define empty function handlers for UART callbacks
    void HAL_UART_RxCallback3();
    void HAL_UART_RxCallback1();

    void HAL_UART_TxCallback1();

    // Define global recieve callback
    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart->Instance == USART3) {
        HAL_UART_RxCallback3();
      } else if (huart->Instance == USART1) {
        HAL_UART_RxCallback1();
      }
    }

    // Define global recieve callback
    void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart == &huart1) {
        HAL_UART_TxCallback1();
      }
    }

    // ############
    // ### for debugging the new timing code, replace and remove when we can
    uint32_t start, stop, elapsed;
    double elapsedtime;

    start = TIM2->CNT;

    // Stuff to time

    stop = TIM2->CNT;

    elapsed = stop - start;

    elapsedtime = (1.0 / (double)SystemCoreClock) * (double)elapsed; // time in seconds

    // ### for debugging the new timing code, replace and remove when we can
    // ############
  =}
  
  timer sys_tick(0 ms, 10 ms)           // Main system clock we will use inside main
  timer switch_motor(0 ms, 1000 ms)     // Switch moto position state
  state count: int = 1

  qdec = new QDEC()                           // FPGA-based QDEC Encoders
  usm = new USM()                             // Ultrasonic motor controllers
  ros_controller = new ROSInterface()        // ROS UART Interface
  motor_controller = new MotorController()    // Main Motor driver + controller
  home_controller = new HomeController()      // Used to home the motors
  mode_machine = new ModeMachine()            // Used to trigger other reactors behavior

  // Route encoder information to relevant reactors
  qdec.qdec_out -> motor_controller.qdec_pos
  qdec.qdec_vel_out -> motor_controller.qdec_vel
  qdec.qdec_out -> ros_controller.current_joint after 0;
  qdec.sea_out -> motor_controller.qdec_sea
  qdec.sea_out -> ros_controller.current_joint_sea after 0;

  // Route joint targets/information
  //motor_controller.current_joint -> ros_controller.current_joint after 0; // make ros read these from qdec!
  //motor_controller.current_joint_sea -> ros_controller.current_joint_sea after 0;
  motor_controller.current_joint -> home_controller.current_pos after 0;
  motor_controller.current_joint_sea -> home_controller.sea_pos after 0;
  motor_controller.speed -> usm.speed
  ros_controller.target_pos_ext -> motor_controller.target_pos_ext
  ros_controller.target_vel_ext -> motor_controller.target_vel_ext

  ros_controller.sea_offset -> motor_controller.sea_offset
  ros_controller.sea_lim -> motor_controller.sea_lim
  
  
  ros_controller.set_mode_change -> mode_machine.set_mode_change
  

  mode_machine.reset_qdec -> qdec.reset_qdec
  mode_machine.enable_motor_command -> motor_controller.enable_motor_command
  mode_machine.enable_homing_command -> home_controller.enable_homing_command
  mode_machine.motor_controller_internal_external_target_mode -> motor_controller.target_mode
  mode_machine.motor_controller_target_sel -> motor_controller.target_sel
  mode_machine.force_disable_motor_pins -> usm.force_disable_motor_pins

  home_controller.is_home -> mode_machine.is_homing_finished after 0;
  home_controller.motor_speed -> motor_controller.target_vel_int
  
  // ############
  // ### for debugging the new timing code, replace and remove when we can
  timer heartbeat_timer(0, 10 ms)

  reaction(heartbeat_timer){=
    stop = TIM2->CNT;

    elapsed = stop - start;
    start = TIM2->CNT;

    elapsedtime = (1.0 / (double)SystemCoreClock) * (double)elapsed; // time in seconds

    printf("Main Timer: Elapsed time in microseconds: %d us. Expected 10000 us or 10 ms.", ((int)(elapsedtime * 1000000)));
    
    =}
  
  // ### for debugging the new timing code, replace and remove when we can
  // ############

  reaction(startup) {=
    // Prep all GPIO values
    //MX_GPIO_Init();

    // Initialize the STM32 peripherals
    stm32_init();

    
  =}

}