target C {
  single-threaded: true,
  platform: {
    name: "STM32",
    board: "F446RE"
  }
}

import QDEC from "lib/Drivers/Encoder.lf"
import USM from "lib/Drivers/USM.lf"
import MotorController from "lib/Motor_Controller.lf"
import SerialInterface from "lib/SerialInterface.lf"
import ModeMachine from "lib/Mode_Machine.lf"

preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"
  //#include "stm32_startup.h"
  #include "main.h"

  extern UART_HandleTypeDef huart2;

  =}

// Import and/or declare reactor classes.
main reactor {
  preamble {=
  
    /*
    int _write(int file, char *ptr, int len){
        HAL_UART_Transmit(&PRINT_UART, (uint8_t *)ptr, len, HAL_MAX_DELAY);
        //HAL_UART_Transmit(&huart6, (uint8_t *)ptr, len, HAL_MAX_DELAY);

        // HAL_UART_Transmit_IT(&huart2, (uint8_t *)ptr, len);
        return len;
    }
    */
    extern UART_HandleTypeDef huart1; // make sure these need to be defined here or not
    extern UART_HandleTypeDef huart3;
    extern UART_HandleTypeDef huart4;
    extern UART_HandleTypeDef huart5;

    extern TIM_HandleTypeDef htim6; // used for timing loops

    //UART_HandleTypeDef huart6; // def in ROS_Interface.lf


    // Target positions
    float target_pos[7] =   {0, 0, 0, 0, 0, 0, 0}; // unused
    float target_speed[7] = {0, 0, 0, 0, 0, 0, 0}; // unused
    bool target_sel[7] =    {0, 0, 0, 0, 0, 0, 0};
    static int at_home = 0; // unused

    
    int stm32_init(void){
      HAL_Init();

      SystemClock_Config();

      MX_GPIO_Init();
      MX_DMA_Init();
      MX_UART4_Init();
      MX_USART1_UART_Init();
      MX_USART3_UART_Init();
      MX_USART6_UART_Init();
      MX_TIM3_Init();
      MX_TIM4_Init();
      MX_TIM6_Init();
      HAL_TIM_Base_Start(&htim6); // added!
      MX_RTC_Init();
      MX_USART2_UART_Init();

      printf("\r\n");
      printf("~~~ STM32 START ~~~ \r\n");
      printf("\r\n");

      //HAL_START_DMA(); // not sure if needed
      //main();
      return 0;
    }



    // Define empty function handlers for UART callbacks
    void HAL_UART_RxCallback3();
    void HAL_UART_RxCallback1();

    void HAL_UART_TxCallback1();

    // Define global recieve callback
    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart->Instance == USART3) {
        HAL_UART_RxCallback3();
      } else if (huart->Instance == USART1) {
        HAL_UART_RxCallback1();
      }
    }

    // Define global recieve callback
    void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart == &huart1) {
        HAL_UART_TxCallback1();
      }
    }

  =}

  serial_interface = new SerialInterface()        // ROS UART Interface

  //qdec = new QDEC(sample_period = 5 ms)     // FPGA-based QDEC Encoders
  //usm = new USM()                            // Ultrasonic motor controllers
  
  //motor_controller = new MotorController()    // Main Motor driver + controller
  //mode_machine = new ModeMachine()            // Used to trigger other reactors behavior

  // Route encoder information to relevant reactors
  /*
  qdec.qdec_out -> motor_controller.qdec_pos
  qdec.qdec_vel_out -> motor_controller.qdec_vel

  qdec.sea_out -> motor_controller.qdec_sea

  qdec.qdec_out -> serial_interface.current_joint after 0;
  qdec.sea_out -> serial_interface.current_joint_sea after 0;

  // Route joint targets/information
  motor_controller.speed -> usm.speed
  serial_interface.target_pos_ext -> motor_controller.target_pos_ext
  serial_interface.target_vel_ext -> motor_controller.target_vel_ext

  serial_interface.sea_offset -> motor_controller.sea_offset
  
  serial_interface.set_mode_change -> mode_machine.set_mode_change

  mode_machine.reset_qdec -> qdec.reset_qdec
  mode_machine.enable_motor_command -> motor_controller.enable_motor_command
  mode_machine.motor_controller_internal_external_target_mode -> motor_controller.target_mode
  mode_machine.motor_controller_target_sel -> motor_controller.target_sel
  mode_machine.force_disable_motor_pins -> usm.force_disable_motor_pins
  */
  reaction(startup) {=
    // Prep all GPIO values
    //MX_GPIO_Init();

    // Initialize the STM32 peripherals
    stm32_init();

  =}

}